// Â© 2021
// @ govindthange

//@version=5
indicator("Thange Piccolo Playbook (v2.1)", shorttitle="Thange/Piccolo+", overlay=true, max_labels_count=250, max_lines_count=500)

//
// Collect configuration parameters
//

fromDateInput = input.time(timestamp("1 Apr 2021 05:30 +0300"), title="Backtest From Date")
toDateInput = input.time(timestamp("31 Dec 2021 05:30 +0300"), title="Backtest To Date")

float riskToRewardRatio = input.float(1.0, minval=1.0, title="Risk:Reward Ratio")
float ratioWrtRiskToBeginTrailingSL = input.float (1, minval=0, title="Nurture Phase", tooltip="It is a ratio w.r.t R/R. Until this level the programme will not show any exit signals. You should start trailing stop-loss only after the price crosses this level. This level shown by a red/green dotted line above/below the entry signal.")
int congestionProximity = input.int(10, minval=1, title="Congestion Span", tooltip="How many bars far should the lagging-span be and called safe before it bumps into the price?")
float congestionTolerance = input.float(0, minval=0.0, title="Congestion Tolerance", tooltip="What percent of the highest-high/lowest-low of candles in congestion-span be treated as noise for determining congestion for the lagging-span?")
bool showSignalsUponBreakout = input.bool(true, "Show entry signals upon 9-period high/low breakout", tooltip="When enabled you can place a limit order for entry right at the price dipicted by the gray/green/red line.")

float accountSize = input.float(1000, title="Account Size")
float maxRisk = input.float(25, title="Maximum risk per position") / 100
float exitPercent = input.float(10, title="Scale out percent") / 100
int atrLength = input.int(30, minval=0, title="ATR Length", tooltip="Choose higher values for lower timeframes. Following works best for BTC: [30 for 5m/1H], [9 for 4H/12H]")
float atrStopMultiplier = input.float(3.0, minval=0.0, title="ATR x ?", tooltip="Following works best for BTC: [5 for 5m], [4-5 for 15m/1H], [4 for 4H/6H], [6 for 12H] ")
bool useKumoAsStop = input.bool(true, title="Use kumo as stop loss")
bool useTenkanPeriodFarthestPointAsStop = input.bool(false, title="Use Tenkan-Sen period's farthest point as SL", tooltip="This is for study purpose. Enabling this gives mixed performance.")

bool showPnl = input.bool(true, title="Show profit & loss summary")
bool showTradePlan = input.bool(false, title="Show all entry & exits")
bool horizontalTradePlan = input.bool(true, title="Show trade plan horizontally")
bool showConfluenceInfo = input.bool(false, title="Show confluence Summary")

int tenkanSenPeriod = input.int(9, minval=1, title="Tenkan-Sen Length")
int kijunSenPeriod = input.int(26, minval=1, title="Kijun-Sen Length")
int senkouSpanBPeriod = input.int(52, minval=1, title="Leading Span B Length")
int displacement = input.int(26, minval=1, title="Displacement")

bool tkCrossExitEnabled = input.bool(true, title="Enable TK Cross Exits")
bool allowTkCrossExitInNurturePhase = input.bool(true, title="Allow TK cross exits in nurture phase")

bool allowEntryUponGaps = input.bool(false, "Show entry signals even on gap-up/down candles.", tooltip="This is not recommended!. This setting is only for study purposes.")
bool includeCurrentBarFor9PeriodHighLow = input.bool(false, title="Include current bar to show 9-period highs/lows", tooltip="This is not recommended!. This setting is only for study purposes.")
float breakevenRatio = input.float(0, minval = 0, title="Stop-Loss Breakeven Ratio", tooltip="It is a ratio w.r.t the risk. When price reaches this level in nurture phase the stop-loss should be shifted to breakeven. 0 means no breakeven concept to be used. This setting is for study purpose and performance drops drastically for values greater than 0.")


//########################################################
//########################################################
//####                                                ####
//####                  Declarations                  ####
//####                                                ####
//########################################################
//########################################################

//
// Standard constants
//
YES = 1.0
NO = 0.0

//
// Color definitions
//
sessionColor = color.rgb(0, 0, 0, 100)

longBgColor = color.rgb(0,255,0,94)
longLineColor = color.rgb(29, 176, 12, 0)
longPrimarySignalColor = color.rgb(29, 176, 12, 30)
longSecondarySignalColor = color.new(longPrimarySignalColor, 60)
shortBgColor = color.rgb(255,0,0,92)
shortLineColor = color.rgb(242, 10, 10, 0)
shortPrimarySignalColor = color.rgb(242, 10, 10, 30)
shortSecondarySignalColor = color.new(shortPrimarySignalColor, 60)

pnlLabelColor = color.new(color.black, 60)
pnlLabelProfitColor = color.green
pnlLabelProfitBgColor = color.new(longPrimarySignalColor, 87)
pnlLabelLossColor = color.red
pnlLabelLossBgColor = color.new(shortPrimarySignalColor, 85)

pnlLabelMaxCapitalColor =  color.new(color.blue, 45)
pnlLabelMaxCapitalTextColor =  color.yellow

// Initialize an empty array to store trading parameters
var context = array.new_float(15)

f_set(_key, _val) => array.set(context, _key, _val)

f_get(_key) => array.get(context, _key)

f_getString(_key) => str.tostring(array.get(context, _key))

f_true(_key) => f_get(_key) == YES

f_print(_text) =>
    var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.white, size.small, text.align_left)
    label.set_xy(_label, bar_index, ta.highest(10)[1])
    label.set_text(_label, _text)

// Create string format template to restrict SL precision to ticks.
f_tickFormat() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")


//###############################################
//###############################################
//####                                       ####
//####    Ichimoku Cloud - The Core Logic    ####
//####                                       ####
//###############################################
//#####33########################################

donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

tenkanSen = donchian(tenkanSenPeriod)
kijunSen = donchian(kijunSenPeriod)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = donchian(senkouSpanBPeriod)

barIndex = includeCurrentBarFor9PeriodHighLow ? 0 : 1
highestTenkanSenBar = ta.highestbars(high[barIndex], tenkanSenPeriod)
highestTenkanValue = ta.highest(high[barIndex], tenkanSenPeriod)
lowestTenkanSenBar = ta.lowestbars(low[barIndex], tenkanSenPeriod)
lowestTenkanValue = ta.lowest(low[barIndex], tenkanSenPeriod)

highestKijunSenBar = ta.highestbars(kijunSenPeriod)
highestKijunValue = ta.highest(kijunSenPeriod)
lowestKijunSenBar = ta.lowestbars(kijunSenPeriod)
lowestKijunValue = ta.lowest(kijunSenPeriod)


//##########################################################################
//##########################################################################
//####                                                                  ####
//####    Assess for high probability setup on the trading timeframe    ####
//####                                                                  ####
//##########################################################################
//##########################################################################

//
// How is current kumo?
//
float temp = senkouSpanA[displacement-1] - senkouSpanB[displacement-1]
string kumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")


//
// How is future kumo?
//
temp := senkouSpanA - senkouSpanB
string leadingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")


//
// Where is price w.r.t kumo?
//
string priceWrtKumo = "within"
if ((kumoView == "bullish" or kumoView == "neutral") and close > senkouSpanA[displacement-1])
     or ((kumoView == "bearish" or kumoView == "neutral") and close > senkouSpanB[displacement-1])
    priceWrtKumo := "above"
else if ((kumoView == "bullish" or kumoView == "neutral") and close < senkouSpanB[displacement-1])
     or ((kumoView == "bearish" or kumoView == "neutral") and close < senkouSpanA[displacement-1])
    priceWrtKumo := "below"


//
// Where is price w.r.t tenkan?
//
string priceWrtTenkan = close > tenkanSen ? "above" : (close < tenkanSen ? "below" : "at")


//
// Where tenkan w.r.t kijun?
//
string tenkanWrtKijun = tenkanSen > kijunSen ? "above" : ( tenkanSen < kijunSen ? "below" : "at")


//
// Where is TK cross w.r.t kumo? <--- This is not a filter. Ignore!
//
var string recentTkCross = "unknown"

bool didNewTkCrossOccur = false
if (tenkanSen[1] <= kijunSen[1] and tenkanSen > kijunSen)
    recentTkCross := "bullish"
    didNewTkCrossOccur := true
else if (tenkanSen[1] >= kijunSen[1] and tenkanSen < kijunSen)
    recentTkCross := "bearish"
    didNewTkCrossOccur := true

var string tkCrossWrtKumo = "within"
if (didNewTkCrossOccur
     and kumoView == "bullish"
     and kijunSen > senkouSpanA[displacement-1])
     or (kumoView == "bearish" and kijunSen > senkouSpanB[displacement-1])
    tkCrossWrtKumo := "above"
else if (didNewTkCrossOccur
     and ((kumoView == "bullish" and kijunSen < senkouSpanB[displacement-1])
     or (kumoView == "bearish" and kijunSen < senkouSpanA[displacement-1])))
    tkCrossWrtKumo := "below"


//
// Where is chikou w.r.t price?
//
string chikouWrtPrice = "at"
if (close > high[displacement-1])
    chikouWrtPrice := "above"
else if (close < low[displacement-1])
    chikouWrtPrice := "below"


//
// Where is chikou w.r.t kumo?
//
temp := senkouSpanA[2*displacement-1] - senkouSpanB[2*displacement-1]
string laggingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

string chikouWrtKumo = "within"
if (laggingKumoView == "bullish" and close > senkouSpanA[2*displacement-1])
     or (kumoView == "bearish" and close > senkouSpanB[2*displacement-1])
    chikouWrtKumo := "above"
else if (laggingKumoView == "bullish" and close < senkouSpanB[2*displacement-1])
     or (laggingKumoView == "bearish" and close < senkouSpanA[2*displacement-1])
    chikouWrtKumo := "below"


//
// Where is chikou w.r.t a flat Senkou-Span-B ahead?
//


//
// Is chikou free from congestion ahead? Is it heading into price?
//
highestForChikou = (1-congestionTolerance/100) * ta.highest(high[displacement-congestionProximity], congestionProximity)
lowestForChikou = (1-congestionTolerance/100) * ta.lowest(low[displacement-congestionProximity], congestionProximity)
isChikouSpanFree = recentTkCross == "bullish" ?
                                         (close > highestForChikou)
                                         : recentTkCross == "bearish" ?
                                                 (close < lowestForChikou)
                                                 : chikouWrtPrice == "above" ? (close > highestForChikou) : chikouWrtPrice == "below" ? (close < lowestForChikou) : true


//
// Declare constants to access global variables
//
IDX_PriceLevelToBeginTrailingStopLoss = 0
IDX_ShouldExitOnStopLoss = 1
IDX_CanExitAfterKijunOrTkCross = 2
IDX_ShouldExitOnTkCross = 3
IDX_TxCrossPrice = 4

f_reset() =>
    f_set(IDX_PriceLevelToBeginTrailingStopLoss, -1)
    f_set(IDX_ShouldExitOnStopLoss, NO)
    f_set(IDX_CanExitAfterKijunOrTkCross, NO)
    f_set(IDX_ShouldExitOnTkCross, NO)
    f_set(IDX_TxCrossPrice, -1)
    

//##########################################################################
//##########################################################################
//####                                                                  ####
//####             Establish market view through confluence             ####
//####                                                                  ####
//##########################################################################
//##########################################################################

string marketView = "conslidating"
if priceWrtKumo == "above"
     and priceWrtTenkan == "above"
     and tenkanWrtKijun == "above"
     and leadingKumoView == "bullish"
     and chikouWrtPrice == "above"
     and isChikouSpanFree
    marketView := "bullish"
else if priceWrtKumo == "below"
     and priceWrtTenkan == "below"
     and tenkanWrtKijun == "below"
     and leadingKumoView == "bearish"
     and chikouWrtPrice == "below"
     and isChikouSpanFree
    marketView := "bearish"

lowestSSB = ta.lowest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)
highestSSB = ta.highest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)

float ssbProximityToChikou = -1.0
if (marketView == "bullish" and chikouWrtKumo == "below")
    ssbProximityToChikou := (lowestSSB - close)*100/close
else if (marketView == "bearish" and chikouWrtKumo == "above")
    ssbProximityToChikou := (close - lowestSSB)*100/close

//
// Asssess exit scenarios
//
var inLongTrade = false
var inShortTrade = false

//
// Where is price w.r.t kijun?
//
string priceWrtKijun = "unknown"
if inLongTrade // for exiting in a long position
    priceWrtKijun := low < kijunSen ? "below" : (low > kijunSen ? "above" : "at")
else if inShortTrade // for exiting in a short position
    priceWrtKijun := high < kijunSen ? "below" : (high > kijunSen ? "above" : "at")
else // for confluence to enter position
    priceWrtKijun := close < kijunSen ? "below" : (close > kijunSen ? "above" : "at")

atr = ta.atr(atrLength) * atrStopMultiplier

//
// Prepare for signaling long/short entries
//

float kumoStopLoss = -1
if not na(senkouSpanA[displacement-1])
     and not na(senkouSpanB[displacement-1])
    if priceWrtKumo == "above" or priceWrtKumo == "within"
        if kumoView == "bullish" or kumoView == "neutral"
            kumoStopLoss := senkouSpanB[displacement-1]
        else if kumoView == "bearish" or kumoView == "neutral"
            kumoStopLoss := senkouSpanA[displacement-1]
    else if priceWrtKumo == "below"
        if kumoView == "bullish" or kumoView == "neutral"
            kumoStopLoss := senkouSpanA[displacement-1]
        else if kumoView == "bearish" or kumoView == "neutral"
            kumoStopLoss := senkouSpanB[displacement-1]


bool didCandleGap = (open > high[1] and low > high[1]) or (open < low[1] and high < low[1])
//plotshape(not allowEntryUponGaps and didCandleGap, title= "Candle Gap Up/Down", location=location.belowbar, color=color.gray, transp=0, style=shape.arrowup, text="", size=size.normal, editable=false)

bool withinTestRange = (time >= fromDateInput and time <= toDateInput)

var label activeTradeLabel = na
var string activeTradeInfo = na
var label maxCapitalLabel = na
var color maxCapitalLabelBgColor = na
var color maxCapitalLabelTextColor = na

float maxRiskPerPosition = accountSize * maxRisk
var float qty = 0.0
var float qtyPerExit = 0.0
var float remainingExitQty = 0.0
var int totalTrades = 0
var float tradeSize = 0.0
var float pnl = 0.0

var shouldExitOnTenkan = false
var shouldExitOnKijun = false
var shouldExitOnTkCross = false
var shouldExitOnStop = false
var shouldTakeProfit = false
var didTakeProfit = false
var shouldExitPreemptively = false

var entryPrice = 0.0

var stopLoss = 0.0
var breakevenTrigger = 0.0
var takeProfit = 0.0
var tenkanExit1 = 0.0
var tenkanExit2 = 0.0
var tenkanExit3 = 0.0
var tenkanExit4 = 0.0
var tenkanExit5 = 0.0
var tenkanExit6 = 0.0
var tenkanExit7 = 0.0
var tenkanExit8 = 0.0
var tenkanExit9 = 0.0
var tenkanExit10 = 0.0
var kijunExit = 0.0
var tkCrossExit = 0.0
var preemptiveExit = 0.0

var stopLossQty = 0.0
var takeProfitQty = 0.0
var tenkanExitQty1 = 0.0
var tenkanExitQty2 = 0.0
var tenkanExitQty3 = 0.0
var tenkanExitQty4 = 0.0
var tenkanExitQty5 = 0.0
var tenkanExitQty6 = 0.0
var tenkanExitQty7 = 0.0
var tenkanExitQty8 = 0.0
var tenkanExitQty9 = 0.0
var tenkanExitQty10 = 0.0
var kijunExitQty = 0.0
var tkCrossExitQty = 0.0
var preemptiveExitQty = 0.0

var stopLossGains = 0.0
var takeProfitGains = 0.0
var tenkanExitGains1 = 0.0
var tenkanExitGains2 = 0.0
var tenkanExitGains3 = 0.0
var tenkanExitGains4 = 0.0
var tenkanExitGains5 = 0.0
var tenkanExitGains6 = 0.0
var tenkanExitGains7 = 0.0
var tenkanExitGains8 = 0.0
var tenkanExitGains9 = 0.0
var tenkanExitGains10 = 0.0
var kijunExitGains = 0.0
var tkCrossExitGains = 0.0
var preemptiveExitGains = 0.0


//################################################################
//################################################################
//####                                                        ####
//####                    Entry Strategies                    ####
//####                                                        ####
//################################################################
//################################################################

f_tradeDirection(long, short) => long ? 1 : (short ? -1 : 0)

var canPrepareForLong = false
var shouldGoLong = false
var longBreakoutPrice = 0.0
var bool hasSignaledForLong = false
bool didLongPositionClose = false

canPrepareForLong := withinTestRange
                         and (allowEntryUponGaps or not didCandleGap)
                         and not inLongTrade
                         and not inShortTrade
                         and marketView == "bullish"

if showSignalsUponBreakout
    if not canPrepareForLong
        hasSignaledForLong := false
        longBreakoutPrice := 0.0
    else if canPrepareForLong and not hasSignaledForLong
        longBreakoutPrice := highestTenkanValue
        // Draw 9-period high line to indicate the best entry point
        line.new(bar_index-tenkanSenPeriod, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
        line.new(bar_index+highestTenkanSenBar-1, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=longLineColor, style=line.style_solid)
else if canPrepareForLong
    // Draw 9-period high line to indicate the best entry point
    line.new(bar_index-tenkanSenPeriod, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
    line.new(bar_index+highestTenkanSenBar-1, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=longLineColor, style=line.style_solid)

if canPrepareForLong
     and (not showSignalsUponBreakout or high >= longBreakoutPrice)
    
    shouldGoLong := true
    hasSignaledForLong := false
    inLongTrade := true
    shouldExitOnKijun := false
    
    entryPrice := showSignalsUponBreakout ? longBreakoutPrice : close
    longBreakoutPrice := 0.0

    // Set stop-loss below the kumo, kijunSen, or below the entry candle's low, whichever is the lowest.
    stopLoss := useKumoAsStop and kumoStopLoss > 0 and kumoStopLoss < kijunSen ? kumoStopLoss - atr : kijunSen - atr
    if stopLoss > low
        stopLoss := low - atr

    // If tenkan period's low is the lowest point then set it as SL
    if useTenkanPeriodFarthestPointAsStop
        farthest = ta.lowest(low, tenkanSenPeriod + 1)
        if stopLoss > farthest
            stopLoss := farthest - atr
    
    takeProfit := entryPrice + (entryPrice - stopLoss) * riskToRewardRatio * f_tradeDirection(inLongTrade, inShortTrade)
    
    qty := maxRiskPerPosition / (entryPrice - stopLoss)
    qtyPerExit := qty * exitPercent
    remainingExitQty := qty
    tradeSize := qty * entryPrice
    
    breakevenTrigger := entryPrice + (entryPrice - stopLoss) * breakevenRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, entryPrice + (entryPrice - stopLoss) * ratioWrtRiskToBeginTrailingSL)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=2, color=longLineColor, style=line.style_dotted)
    line.new(bar_index, stopLoss, bar_index+10, stopLoss, width=2, color=longLineColor, style=line.style_solid)
    
    activeTradeInfo := str.format("#{0}. Buy {1} w/ {2, number, currency}\nEntry @ {3, number, currency}\nStop @ {4, number, currency}\nProfit @ {5, number, currency} ({6} R/R)", totalTrades+1, str.tostring(qty), tradeSize, entryPrice, stopLoss, takeProfit, riskToRewardRatio)
    activeTradeLabel := label.new(x = bar_index,
                             y = low,
                             style = label.style_label_up,
                             color = pnlLabelLossBgColor,
                             textcolor = pnlLabelLossColor,
                             yloc = yloc.belowbar,
                             text = "Long",
                             tooltip = activeTradeInfo)

var canPrepareForShort = false
var shouldGoShort = false
var shortBreakoutPrice = 0.0
var bool hasSignaledForShort = false
bool didShortPositionClose = false

canPrepareForShort :=  withinTestRange
                         and (allowEntryUponGaps or not didCandleGap)
                         and not inShortTrade
                         and not inLongTrade
                         and marketView == "bearish"

if showSignalsUponBreakout
    if not canPrepareForShort
        hasSignaledForShort := false
        shortBreakoutPrice := 0.0
    else if canPrepareForShort and not hasSignaledForShort
        shortBreakoutPrice := lowestTenkanValue
        // Draw 9-period high line to indicate the best entry point
        line.new(bar_index-tenkanSenPeriod, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
        line.new(bar_index+lowestTenkanSenBar-1, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=shortLineColor, style=line.style_solid)
else if canPrepareForShort
    // Draw 9-period high line to indicate the best entry point
    line.new(bar_index-tenkanSenPeriod, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
    line.new(bar_index+lowestTenkanSenBar-1, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=shortLineColor, style=line.style_solid)

if canPrepareForShort
     and (not showSignalsUponBreakout or low <= shortBreakoutPrice)
    
    shouldGoShort := true
    hasSignaledForShort := false
    inShortTrade := true
    shouldExitOnKijun := false
    
    entryPrice := showSignalsUponBreakout ? shortBreakoutPrice : close
    shortBreakoutPrice := 0.0

    // Set stop-loss above the kumo, kijunSen, or above the entry candle's high, whichever is the highest.
    stopLoss := useKumoAsStop and kumoStopLoss > kijunSen ? kumoStopLoss + atr : kijunSen + atr
    if stopLoss < high
        stopLoss := high + atr
    
    // If tenkan period's high is the highest point then set it as SL
    if useTenkanPeriodFarthestPointAsStop
        farthest = ta.highest(high, tenkanSenPeriod + 1)
        if stopLoss < farthest
            stopLoss := farthest + atr
    
    takeProfit := entryPrice - (stopLoss - entryPrice) * riskToRewardRatio
    
    qty := maxRiskPerPosition / (stopLoss - entryPrice)
    qtyPerExit := qty * exitPercent
    remainingExitQty := qty
    tradeSize := qty * entryPrice
    
    breakevenTrigger := entryPrice - (stopLoss - entryPrice) * breakevenRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, entryPrice - (stopLoss - entryPrice) * ratioWrtRiskToBeginTrailingSL)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=2, color=shortLineColor, style=line.style_dotted)
    line.new(bar_index, stopLoss, bar_index+10, stopLoss, width=2, color=shortLineColor, style=line.style_solid)
    
    activeTradeInfo := str.format("#{0}. Sell {1} w/ {2, number, currency}\nEntry @ {3, number, currency}\nStop @ {4, number, currency}\nProfit @ {5, number, currency} ({6} R/R)", totalTrades+1, str.tostring(qty), tradeSize, entryPrice, stopLoss, takeProfit, riskToRewardRatio)
    activeTradeLabel := label.new(x = bar_index,
                             y = high,
                             style = label.style_label_down,
                             color = pnlLabelLossBgColor,
                             textcolor = pnlLabelLossColor,
                             yloc = yloc.abovebar,
                             text = "Short",
                             tooltip = activeTradeInfo)


//##############################################################
//##############################################################
//####                                                      ####
//####                    Exit Strategies                   ####
//####                                                      ####
//##############################################################
//##############################################################


if ((inLongTrade and high >= takeProfit)
         or (inShortTrade and low <= takeProfit))
     and not didTakeProfit
     and remainingExitQty > 0
    
    shouldTakeProfit := true
    if (remainingExitQty > qtyPerExit)
        takeProfitQty := qtyPerExit
    else
        takeProfitQty := remainingExitQty
    takeProfitGains := (takeProfit - entryPrice) * takeProfitQty * f_tradeDirection(inLongTrade, inShortTrade)
    pnl := pnl + takeProfitGains
    remainingExitQty := remainingExitQty - takeProfitQty
    activeTradeInfo += str.format("\nTP {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(takeProfitQty), takeProfit, takeProfitGains, pnl)
    label.set_tooltip(activeTradeLabel, activeTradeInfo)


if (inLongTrade and high > f_get(IDX_PriceLevelToBeginTrailingStopLoss))
     or (inShortTrade and low < f_get(IDX_PriceLevelToBeginTrailingStopLoss))
    f_set(IDX_CanExitAfterKijunOrTkCross, YES)


if ((inLongTrade and high >= breakevenTrigger)
         or (inShortTrade and low <= breakevenTrigger))
     and breakevenRatio != 0.0
     and not f_true(IDX_CanExitAfterKijunOrTkCross)
    
    stopLoss := entryPrice
    line.new(bar_index, breakevenTrigger, bar_index+5, breakevenTrigger, width=2, color=color.white, style=line.style_solid)


//
// Since kijun is a trailing stop-loss, the old stop-loss order is valid only
// if the trade is in nurture phase (i.e. IDX_CanExitAfterKijunOrTkCross = false)
//
if ((inLongTrade and low <= stopLoss)
         or (inShortTrade and high >= stopLoss))
     and not f_true(IDX_CanExitAfterKijunOrTkCross)
    
    f_set(IDX_ShouldExitOnStopLoss, YES)
    shouldExitOnStop := true
    stopLossGains := (stopLoss - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
    pnl := pnl + stopLossGains
    activeTradeInfo += str.format("\nSL {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), stopLoss, stopLossGains, pnl)
    label.set_tooltip(activeTradeLabel, activeTradeInfo)
    remainingExitQty := 0

else if ((inLongTrade and priceWrtKijun == "below")
         or (inShortTrade and priceWrtKijun == "above"))
     and f_true(IDX_CanExitAfterKijunOrTkCross)
    
    shouldExitOnKijun := true
    kijunExit := kijunSen
    if (inLongTrade and kijunExit < stopLoss)
         or (inShortTrade and kijunExit > stopLoss)
        kijunExitGains := (stopLoss - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + kijunExitGains
        activeTradeInfo += str.format("\nKE~SL {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), stopLoss, kijunExitGains, pnl)
    else
        kijunExitGains := (kijunExit - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + kijunExitGains
        activeTradeInfo += str.format("\nKE {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), kijunExit, kijunExitGains, pnl)
    label.set_tooltip(activeTradeLabel, activeTradeInfo)
    remainingExitQty := 0
//
// Since a TK-cross-exit is a manually placed order it can only be placed when the other 2 limit-orders,
// the kijun-exit (a trailing stop) or the stop-loss (automatically triggerred order) are not triggerred yet.
//
else if ((inLongTrade and recentTkCross == "bearish")
         or (inShortTrade and recentTkCross == "bullish"))
     and tkCrossExitEnabled
     and (allowTkCrossExitInNurturePhase 
             or (not allowTkCrossExitInNurturePhase and f_true(IDX_CanExitAfterKijunOrTkCross)))
    
    shouldExitOnTkCross := true
    tkCrossExit := close
    if (inLongTrade and tkCrossExit < stopLoss)
         or (inShortTrade and tkCrossExit > stopLoss)
        tkCrossExitGains := (stopLoss - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tkCrossExitGains
        activeTradeInfo += str.format("\nTKCP~SL {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), stopLoss, tkCrossExitGains, pnl)
    else
        tkCrossExitGains := (tkCrossExit - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tkCrossExitGains
        activeTradeInfo += str.format("\nTKCP @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), tkCrossExit, tkCrossExitGains, pnl)
    label.set_tooltip(activeTradeLabel, activeTradeInfo)
    remainingExitQty := 0

else if ((inLongTrade and marketView == "bearish")
         or (inShortTrade and marketView == "bullish"))
    
    shouldExitPreemptively := true
    if (inLongTrade and close < stopLoss)
         or (inShortTrade and close > stopLoss)
        preemptiveExitGains := (stopLoss - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + preemptiveExitGains
        activeTradeInfo += str.format("\nPE~SL {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), stopLoss, preemptiveExitGains, pnl) // PE is Preemptive Exit
    else
        preemptiveExitGains := (close - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + preemptiveExitGains
        activeTradeInfo += str.format("\nPE {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(remainingExitQty), close, preemptiveExitGains, pnl) // PE is Preemptive Exit
    label.set_tooltip(activeTradeLabel, activeTradeInfo)
    remainingExitQty := 0
//
// Since all tenkan-exits are manually placed orders they can only be placed when the other 2 limit-orders,
// the kijun-exit (a trailing stop) or the stop-loss (automatically triggerred order) are not triggerred yet.
// You'll also not bother scaling out gains by placing a tenkan-exit order when a TK-cross/preemptive-exits has occurred.
//
else if ((inLongTrade and open < tenkanSen and high <= tenkanSen)
         or (inShortTrade and open > tenkanSen and low <= tenkanSen))
     and remainingExitQty > 0
    
    shouldExitOnTenkan := true
    if (tenkanExit1 == 0.0)
        tenkanExit1 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty1 := qtyPerExit
        else
            tenkanExitQty1 := remainingExitQty
        tenkanExitGains1 := (tenkanExit1 - entryPrice) * tenkanExitQty1 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains1
        remainingExitQty := remainingExitQty - tenkanExitQty1
        activeTradeInfo += str.format("\nTE1 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty1), close, tenkanExitGains1, pnl)
    
    else if (tenkanExit2 == 0.0)
        tenkanExit2 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty2 := qtyPerExit
        else
            tenkanExitQty2 := remainingExitQty
        tenkanExitGains2 := (tenkanExit2 - entryPrice) * tenkanExitQty2 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains2
        remainingExitQty := remainingExitQty - tenkanExitQty2
        activeTradeInfo += str.format("\nTE2 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty2), close, tenkanExitGains2, pnl)
    
    else if (tenkanExit3 == 0.0)
        tenkanExit3 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty3 := qtyPerExit
        else
            tenkanExitQty3 := remainingExitQty
        tenkanExitGains3 := (tenkanExit3 - entryPrice) * tenkanExitQty3 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains3
        remainingExitQty := remainingExitQty - tenkanExitQty3
        activeTradeInfo += str.format("\nTE3 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty3), close, tenkanExitGains3, pnl)
    
    else if (tenkanExit4 == 0.0)
        tenkanExit4 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty4 := qtyPerExit
        else
            tenkanExitQty4 := remainingExitQty
        tenkanExitGains4 := (tenkanExit4 - entryPrice) * tenkanExitQty4 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains4
        remainingExitQty := remainingExitQty - tenkanExitQty4
        activeTradeInfo += str.format("\nTE4 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty4), close, tenkanExitGains4, pnl)
    
    else if (tenkanExit5 == 0.0)
        tenkanExit5 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty5 := qtyPerExit
        else
            tenkanExitQty5 := remainingExitQty
        tenkanExitGains5 := (tenkanExit5 - entryPrice) * tenkanExitQty5 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains5
        remainingExitQty := remainingExitQty - tenkanExitQty5
        activeTradeInfo += str.format("\nTE5 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty5), close, tenkanExitGains5, pnl)
    
    else if (tenkanExit6 == 0.0)
        tenkanExit6 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty6 := qtyPerExit
        else
            tenkanExitQty6 := remainingExitQty
        tenkanExitGains6 := (tenkanExit6 - entryPrice) * tenkanExitQty6 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains6
        remainingExitQty := remainingExitQty - tenkanExitQty6
        activeTradeInfo += str.format("\nTE6 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty6), close, tenkanExitGains6, pnl)
    
    else if (tenkanExit7 == 0.0)
        tenkanExit7 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty7 := qtyPerExit
        else
            tenkanExitQty7 := remainingExitQty
        tenkanExitGains7 := (tenkanExit7 - entryPrice) * tenkanExitQty7 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains7
        remainingExitQty := remainingExitQty - tenkanExitQty7
        activeTradeInfo += str.format("\nTE7 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty7), close, tenkanExitGains7, pnl)
    
    else if (tenkanExit8 == 0.0)
        tenkanExit8 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty8 := qtyPerExit
        else
            tenkanExitQty8 := remainingExitQty
        tenkanExitGains8 := (tenkanExit8 - entryPrice) * tenkanExitQty8 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains8
        remainingExitQty := remainingExitQty - tenkanExitQty8
        activeTradeInfo += str.format("\nTE8 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty8), close, tenkanExitGains8, pnl)
    
    else if (tenkanExit9 == 0.0)
        tenkanExit9 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty9 := qtyPerExit
        else
            tenkanExitQty9 := remainingExitQty
        tenkanExitGains9 := (tenkanExit9 - entryPrice) * tenkanExitQty9 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains9
        remainingExitQty := remainingExitQty - tenkanExitQty9
        activeTradeInfo += str.format("\nTE9 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty9), close, tenkanExitGains9, pnl)
    
    else if (tenkanExit10 == 0.0)
        tenkanExit10 := close
        if (remainingExitQty > qtyPerExit)
            tenkanExitQty10 := qtyPerExit
        else
            tenkanExitQty10 := remainingExitQty
        tenkanExitGains10 := (tenkanExit10 - entryPrice) * tenkanExitQty10 * f_tradeDirection(inLongTrade, inShortTrade)
        pnl := pnl + tenkanExitGains10
        remainingExitQty := remainingExitQty - tenkanExitQty10
        activeTradeInfo += str.format("\nTE10 {0} @ {1, number, currency} = {2, number, currency}/{3, number, currency}", str.tostring(tenkanExitQty10), close, tenkanExitGains10, pnl)
    
    label.set_tooltip(activeTradeLabel, activeTradeInfo)
else
    shouldExitOnTenkan := false


//################################################################
//################################################################
//####                                                        ####
//####                      Draw Signals                      ####
//####                                                        ####
//################################################################
//################################################################

plotshape(inLongTrade and marketView == "bearish" and shouldExitPreemptively, title= "Preeemptive Long Exit", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)
plotshape(inShortTrade and marketView == "bullish" and shouldExitPreemptively, title= "Preeemptive Short Exit", location=location.belowbar, color=shortPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)

plotshape(showSignalsUponBreakout and canPrepareForLong and not hasSignaledForLong and not shouldGoLong, title= "Prepare to go long", location=location.belowbar, color=color.teal, transp=0, style=shape.triangleup, text="", size=size.tiny, editable=false)
if showSignalsUponBreakout and canPrepareForLong
    canPrepareForLong := false // reset flag
    if showSignalsUponBreakout
        hasSignaledForLong := true

plotshape(showSignalsUponBreakout and canPrepareForShort and not hasSignaledForShort and not shouldGoShort, title= "Prepare to go short", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="", size=size.tiny, editable=false)
if showSignalsUponBreakout and canPrepareForShort
    canPrepareForShort := false // reset flag
    if showSignalsUponBreakout
        hasSignaledForShort := true

plotshape(inLongTrade and ((showSignalsUponBreakout and shouldGoLong) or (not showSignalsUponBreakout and canPrepareForLong)), title="Long Entry A", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.triangleup, text="", size=size.small, editable=false)
plotshape(inLongTrade and ((showSignalsUponBreakout and shouldGoLong) or (not showSignalsUponBreakout and canPrepareForLong)), title="Long Entry B", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.triangleup, text="", size=size.tiny, editable=false)
if not showSignalsUponBreakout
    canPrepareForLong := false
else if shouldGoLong
    shouldGoLong := false

plotshape(inShortTrade and ((showSignalsUponBreakout and shouldGoShort) or (not showSignalsUponBreakout and canPrepareForShort)), title= "Short Entry A", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.triangledown, text="", size=size.small, editable=false)
plotshape(inShortTrade and ((showSignalsUponBreakout and shouldGoShort) or (not showSignalsUponBreakout and canPrepareForShort)), title= "Short Entry B", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.triangledown, text="", size=size.tiny, editable=false)
if not showSignalsUponBreakout
    canPrepareForShort := false
else if shouldGoShort
    shouldGoShort := false

plotshape(inLongTrade and shouldExitOnTenkan, title= "Tenkan Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.diamond, text="", size=size.tiny, editable=false)
plotshape(inShortTrade and shouldExitOnTenkan, title= "Tenkan Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.diamond, text="", size=size.tiny, editable=false)

plotshape(inLongTrade and shouldExitOnKijun, title= "Kijun Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.circle, text="", size=size.tiny, editable=false)
plotshape(inShortTrade and shouldExitOnKijun, title= "Kijun Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.circle, text="", size=size.tiny, editable=false)

plotshape(inLongTrade and shouldExitOnTkCross, title= "TK Cross Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.xcross, text="", size=size.small, editable=false)
plotshape(inShortTrade and shouldExitOnTkCross, title= "TK Cross Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.xcross, text="", size=size.small, editable=false)

plotshape(inLongTrade and (f_true(IDX_ShouldExitOnStopLoss) or shouldExitOnStop), title= "Stop Loss Long Exit", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)
plotshape(inShortTrade and inShortTrade and (f_true(IDX_ShouldExitOnStopLoss) or shouldExitOnStop), title= "Stop Loss Short Exit", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)

plotshape(inLongTrade and shouldTakeProfit, title= "Fixed Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.square, text="", size=size.tiny, editable=false)
plotshape(inShortTrade and shouldTakeProfit, title= "Fixed Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.square, text="", size=size.tiny, editable=false)

if shouldTakeProfit
    didTakeProfit := true
    shouldTakeProfit := false


//###################################################################
//###################################################################
//####                                                           ####
//####                  Flag variables for exit                  ####
//####                                                           ####
//###################################################################
//###################################################################

if (inLongTrade and (shouldExitOnKijun or f_true(IDX_ShouldExitOnStopLoss) or shouldExitOnTkCross or shouldExitPreemptively))
    inLongTrade := false
    f_reset()
    didLongPositionClose := true
    if showSignalsUponBreakout
        hasSignaledForLong := false
        canPrepareForLong := false

if (inShortTrade and (shouldExitOnKijun or f_true(IDX_ShouldExitOnStopLoss) or shouldExitOnTkCross or shouldExitPreemptively))
    inShortTrade := false
    f_reset()
    didShortPositionClose := true
    if showSignalsUponBreakout
        hasSignaledForShort := false
        canPrepareForShort := false

//
// Draw background color
//
if inLongTrade
    sessionColor := longBgColor
else if inShortTrade
    sessionColor := shortBgColor
else if withinTestRange
    sessionColor := color.rgb(0, 0, 0, 60)

bgcolor(sessionColor, editable=false)


//###############################################################
//###############################################################
//####                                                       ####
//####                     Profit & Loss                     ####
//####                                                       ####
//###############################################################
//###############################################################

var int totalCandles = 0
if withinTestRange
    totalCandles := totalCandles + 1

var int winners = 0
var int loosers = 0
var float cumulativeCapital = 0.0
var float maxCapital = 0.0
var float totalPnl = 0.0
var float totalProfit = 0.0
var float totalLoss = 0.0
var float prevPnl = 0.0
var float prevPnlPercent = 0.0
var float maxProfit = 0.0
var float maxLoss = 0.0

float realtime = 0.0
if inLongTrade or inShortTrade
    realtime := (close - entryPrice) * remainingExitQty * f_tradeDirection(inLongTrade, inShortTrade)

if (activeTradeLabel != na
     and (inLongTrade or inShortTrade))
    label.set_color(activeTradeLabel, ((pnl+realtime) > 0 ? pnlLabelProfitBgColor : pnlLabelLossBgColor))
    label.set_textcolor(activeTradeLabel, ((pnl+realtime) > 0 ? pnlLabelProfitColor : pnlLabelLossColor))
    label.set_text(activeTradeLabel, str.format("{0, number, currency}", pnl+realtime))
    label.set_tooltip(activeTradeLabel, str.format("{0}\nâ¶ {1, number, #0.00%} RoI", activeTradeInfo, (pnl + realtime)/tradeSize))

if withinTestRange
     and (didLongPositionClose or didShortPositionClose)
     
    realtime := 0.0
    
    label.set_color(activeTradeLabel, (pnl > 0 ? pnlLabelProfitBgColor : pnlLabelLossBgColor))
    label.set_textcolor(activeTradeLabel, (pnl > 0 ? pnlLabelProfitColor : pnlLabelLossColor))
    label.set_text(activeTradeLabel, str.format("{0, number, currency}", pnl))
    label.set_tooltip(activeTradeLabel, str.format("{0}\nâ¶ {1, number, #0.00%} RoI", activeTradeInfo, pnl/tradeSize))
    
    totalTrades := totalTrades + 1
    
    totalPnl := totalPnl + pnl
    if pnl > 0
        winners := winners + 1
        maxProfit := maxProfit < pnl ? pnl : maxProfit
        totalProfit := totalProfit + pnl
    else
        loosers := loosers + 1
        maxLoss := maxLoss > pnl ? pnl : maxLoss
        totalLoss := totalLoss + pnl
    
    cumulativeCapital := cumulativeCapital + tradeSize
    maxCapital := maxCapital < tradeSize ? tradeSize : maxCapital
    
    prevPnl := pnl
    prevPnlPercent := 100*pnl/tradeSize
    
    if tradeSize == maxCapital
        if maxCapitalLabel != na
            label.set_color(maxCapitalLabel, maxCapitalLabelBgColor)
            label.set_textcolor(maxCapitalLabel, maxCapitalLabelTextColor)
            
        maxCapitalLabelBgColor := (pnl > 0 ? pnlLabelProfitBgColor : pnlLabelLossBgColor)
        maxCapitalLabelTextColor := (pnl > 0 ? pnlLabelProfitColor : pnlLabelLossColor)
        maxCapitalLabel := activeTradeLabel
        label.set_color(activeTradeLabel, pnlLabelMaxCapitalColor)
        label.set_textcolor(activeTradeLabel, pnlLabelMaxCapitalTextColor)
    
    activeTradeLabel := na
    activeTradeInfo := na
    qty := 0.0
    qtyPerExit := 0.0
    remainingExitQty := 0.0
    pnl := 0.0
    tradeSize := 0.0
    
    shouldExitOnKijun := false
    shouldExitOnTenkan := false
    shouldExitOnTkCross := false
    shouldExitOnStop := false
    shouldTakeProfit := false
    didTakeProfit := false
    shouldExitPreemptively := false
    
    entryPrice := 0.0
    
    stopLoss := 0.0
    breakevenTrigger := 0.0
    takeProfit := 0.0
    tenkanExit1 := 0.0
    tenkanExit2 := 0.0
    tenkanExit3 := 0.0
    tenkanExit4 := 0.0
    tenkanExit5 := 0.0
    tenkanExit6 := 0.0
    tenkanExit7 := 0.0
    tenkanExit8 := 0.0
    tenkanExit9 := 0.0
    tenkanExit10 := 0.0
    kijunExit := 0.0
    tkCrossExit := 0.0
    preemptiveExit = 0.0
    
    stopLossQty := 0.0
    takeProfitQty := 0.0
    tenkanExitQty1 := 0.0
    tenkanExitQty2 := 0.0
    tenkanExitQty3 := 0.0
    tenkanExitQty4 := 0.0
    tenkanExitQty5 := 0.0
    tenkanExitQty6 := 0.0
    tenkanExitQty7 := 0.0
    tenkanExitQty8 := 0.0
    tenkanExitQty9 := 0.0
    tenkanExitQty10 := 0.0
    kijunExitQty := 0.0
    tkCrossExitQty := 0.0
    preemptiveExitQty := 0.0
    
    stopLossGains := 0.0
    takeProfitGains := 0.0
    tenkanExitGains1 := 0.0
    tenkanExitGains2 := 0.0
    tenkanExitGains3 := 0.0
    tenkanExitGains4 := 0.0
    tenkanExitGains5 := 0.0
    tenkanExitGains6 := 0.0
    tenkanExitGains7 := 0.0
    tenkanExitGains8 := 0.0
    tenkanExitGains9 := 0.0
    tenkanExitGains10 := 0.0
    kijunExitGains := 0.0
    tkCrossExitGains := 0.0
    preemptiveExitGains := 0.0


//##################################################################
//##################################################################
//####                                                          ####
//####                Information Display Panels                ####
//####                                                          ####
//##################################################################
//##################################################################

// Display PnL summary
var table pnlTable = table.new(position.bottom_left, 7, 3, bgcolor = color.rgb(0, 0, 0, 30), frame_color = color.black)
if (barstate.islast and showPnl)
    table.cell(pnlTable, 0, 0, "Winners", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 0, 1, str.tostring(winners), text_color = color.green, text_halign = text.align_center, text_size = size.small)
    table.cell(pnlTable, 0, 2, str.format("{0, number, currency}", maxProfit), text_halign = text.align_center, text_color = color.rgb(182, 209, 186), text_size = size.small)
    table.cell(pnlTable, 1, 0, "Loosers", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 1, 1, str.tostring(loosers), text_color = color.red, text_halign = text.align_center, text_size = size.small)
    table.cell(pnlTable, 1, 2, str.format("{0, number, currency}", maxLoss), text_halign = text.align_center, text_color = color.rgb(182, 153, 153), text_size = size.small)
    table.cell(pnlTable, 2, 0, "Total", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 2, 1, str.tostring(totalTrades), text_halign = text.align_center, text_color = color.silver, text_size = size.small)
    table.cell(pnlTable, 2, 2, str.format("{0, number, percent}", winners/totalTrades), text_halign = text.align_center, text_color = color.blue, text_size = size.small)
    table.cell(pnlTable, 3, 0, "W/L-PnL", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 3, 1, str.format("{0, number, currency}", totalProfit), text_halign = text.align_center, text_color = color.rgb(182, 209, 186), text_size = size.small)
    table.cell(pnlTable, 3, 2, str.format("{0, number, currency}", totalLoss), text_halign = text.align_center, text_color = color.rgb(182, 153, 153), text_size = size.small)
    table.cell(pnlTable, 4, 0, "Capital", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 4, 1, str.format("{0, number, currency}", maxCapital), text_halign = text.align_center, text_color = color.silver, text_size = size.small)
    table.cell(pnlTable, 4, 2, str.format("{0, number, currency}", cumulativeCapital/totalTrades), text_halign = text.align_center, text_color = color.gray, text_size = size.small)
    table.cell(pnlTable, 5, 0, "Total PnL", text_halign = text.align_center, text_color = color.white, text_size = size.small)
    table.cell(pnlTable, 5, 1, str.format("{0, number, currency}", totalPnl), text_halign = text.align_center, text_color =  (totalPnl > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
    table.cell(pnlTable, 5, 2, str.format("{0, number, #0.00%}", totalPnl/maxCapital), text_halign = text.align_center, text_color =   (totalPnl > 0 ? color.green : color.red), text_size = size.small)
    table.cell(pnlTable, 6, 0, "Days", text_halign = text.align_center, text_color = color.white, text_size = size.small, text_size = size.small)
    table.cell(pnlTable, 6, 1, str.format("{0, number}", (toDateInput - fromDateInput)/ (24 * 60 * 60 * 1000)), text_halign = text.align_center, text_color = color.silver, text_size = size.small)
    table.cell(pnlTable, 6, 2, str.tostring(totalCandles), text_halign = text.align_center, text_color = color.gray, text_size = size.small)

// Display trade information
if horizontalTradePlan
    var table tradeTable = table.new(position.bottom_right, 17, 4, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 1, 0, "Entry", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 2, 0, "TP", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 3, 0, "Exit 1", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 4, 0, "Exit 2", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 5, 0, "Exit 3", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 6, 0, "Exit 4", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 7, 0, "Exit 5", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 8, 0, "Exit 6", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 9, 0, "Exit 7", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 10, 0, "Exit 8", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 11, 0, "Exit 9", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 12, 0, "Exit 10", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 13, 0, "T. SL", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 14, 0, "SL/PnL", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 15, 0, "Qty/%", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 1, (inLongTrade ? "Buy" : ( inShortTrade ? "Sell" : "-")), text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 1, 1, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.blue, text_size = size.small)
        table.cell(tradeTable, 2, 1, str.tostring(inLongTrade ? takeProfit : takeProfit, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 3, 1, str.tostring(tenkanExit1, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 4, 1, str.tostring(tenkanExit2, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 5, 1, str.tostring(tenkanExit3, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 6, 1, str.tostring(tenkanExit4, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 7, 1, str.tostring(tenkanExit5, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 8, 1, str.tostring(tenkanExit6, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 9, 1, str.tostring(tenkanExit7, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 10, 1, str.tostring(tenkanExit8, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 11, 1, str.tostring(tenkanExit9, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 12, 1, str.tostring(tenkanExit10, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 13, 1, str.tostring(kijunExit, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 14, 1, str.format("{0, number, currency}", stopLoss), text_color = color.orange, text_size = size.small)
        table.cell(tradeTable, 15, 1, str.format("{0, number, #0.0000}", qty), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 0, 2, "+/-", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 1, 2, str.format("{0,number,currency}", tradeSize), text_color = color.aqua, text_size = size.small)
        table.cell(tradeTable, 2, 2, str.tostring(takeProfitGains, str.tostring(f_tickFormat())), text_color = (takeProfitGains > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 3, 2, str.tostring(tenkanExitGains1, str.tostring(f_tickFormat())), text_color = (tenkanExitGains1 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 4, 2, str.tostring(tenkanExitGains2, str.tostring(f_tickFormat())), text_color = (tenkanExitGains2 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 5, 2, str.tostring(tenkanExitGains3, str.tostring(f_tickFormat())), text_color = (tenkanExitGains3 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 6, 2, str.tostring(tenkanExitGains4, str.tostring(f_tickFormat())), text_color = (tenkanExitGains4 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 7, 2, str.tostring(tenkanExitGains5, str.tostring(f_tickFormat())), text_color = (tenkanExitGains5 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 8, 2, str.tostring(tenkanExitGains6, str.tostring(f_tickFormat())), text_color = (tenkanExitGains6 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 9, 2, str.tostring(tenkanExitGains7, str.tostring(f_tickFormat())), text_color = (tenkanExitGains7 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 10, 2, str.tostring(tenkanExitGains8, str.tostring(f_tickFormat())), text_color = (tenkanExitGains8 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 11, 2, str.tostring(tenkanExitGains9, str.tostring(f_tickFormat())), text_color = (tenkanExitGains9 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 12, 2, str.tostring(tenkanExitGains10, str.tostring(f_tickFormat())), text_color = (tenkanExitGains10 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 13, 2, str.tostring(kijunExitGains, str.tostring(f_tickFormat())), text_color = (kijunExitGains > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 14, 2, str.format("{0, number, currency}", pnl+realtime), text_color = (pnl+realtime > 0 ? color.green : color.red), text_size = size.small)
        table.cell(tradeTable, 15, 2, str.format("{0, number, #0.00%}", (pnl+realtime)/tradeSize), text_color = (pnl+realtime > 0 ? color.green : color.red), text_size = size.small)
else
    var table tradeTable = table.new(position.bottom_right, 4, 17, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 0, 1, "Entry", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 2, "TP", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 3, "Exit 1", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 4, "Exit 2", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 5, "Exit 3", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 6, "Exit 4", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 7, "Exit 5", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 8, "Exit 6", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 9, "Exit 7", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 10, "Exit 8", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 11, "Exit 9", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 12, "Exit 10", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 13, "T. SL", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 14, "SL/PnL", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 0, 15, "Qty/%", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 1, 0, (inLongTrade ? "Buy" : ( inShortTrade ? "Sell" : "-")), text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 1, 1, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.blue, text_size = size.small)
        table.cell(tradeTable, 1, 2, str.tostring(inLongTrade ? takeProfit : takeProfit, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 3, str.tostring(tenkanExit1, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 4, str.tostring(tenkanExit2, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 5, str.tostring(tenkanExit3, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 6, str.tostring(tenkanExit4, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 7, str.tostring(tenkanExit5, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 8, str.tostring(tenkanExit6, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 9, str.tostring(tenkanExit7, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 10, str.tostring(tenkanExit8, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 11, str.tostring(tenkanExit9, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 12, str.tostring(tenkanExit10, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 13, str.tostring(kijunExit, str.tostring(f_tickFormat())), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 1, 14, str.format("{0, number, currency}", stopLoss), text_color = color.orange, text_size = size.small)
        table.cell(tradeTable, 1, 15, str.format("{0, number, #0.0000}", qty), text_color = color.gray, text_size = size.small)
        table.cell(tradeTable, 2, 0, "+/-", text_color = color.white, text_size = size.small)
        table.cell(tradeTable, 2, 1, str.format("{0, number, currency}", tradeSize), text_color = color.aqua, text_size = size.small)
        table.cell(tradeTable, 2, 2, str.tostring(takeProfitGains, str.tostring(f_tickFormat())), text_color = (takeProfitGains > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 3, str.tostring(tenkanExitGains1, str.tostring(f_tickFormat())), text_color = (tenkanExitGains1 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 4, str.tostring(tenkanExitGains2, str.tostring(f_tickFormat())), text_color = (tenkanExitGains2 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 5, str.tostring(tenkanExitGains3, str.tostring(f_tickFormat())), text_color = (tenkanExitGains3 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 6, str.tostring(tenkanExitGains4, str.tostring(f_tickFormat())), text_color = (tenkanExitGains4 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 7, str.tostring(tenkanExitGains5, str.tostring(f_tickFormat())), text_color = (tenkanExitGains5 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 8, str.tostring(tenkanExitGains6, str.tostring(f_tickFormat())), text_color = (tenkanExitGains6 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 9, str.tostring(tenkanExitGains7, str.tostring(f_tickFormat())), text_color = (tenkanExitGains7 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 10, str.tostring(tenkanExitGains8, str.tostring(f_tickFormat())), text_color = (tenkanExitGains8 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 11, str.tostring(tenkanExitGains9, str.tostring(f_tickFormat())), text_color = (tenkanExitGains9 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 12, str.tostring(tenkanExitGains10, str.tostring(f_tickFormat())), text_color = (tenkanExitGains10 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 13, str.tostring(kijunExitGains, str.tostring(f_tickFormat())), text_color = (kijunExitGains > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_size = size.small)
        table.cell(tradeTable, 2, 14, str.format("{0, number, currency}", pnl+realtime), text_color = (pnl+realtime > 0 ? color.green : color.red), text_size = size.small)
        table.cell(tradeTable, 2, 15, str.format("{0, number, percent}", (pnl+realtime)/tradeSize), text_color = (pnl+realtime > 0 ? color.green : color.red), text_size = size.small)

// Display confluence information
var table confluenceTable = table.new(position.top_right, 3, 19, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
if (barstate.islast and showConfluenceInfo)
    table.cell(confluenceTable, 0, 0, "1. Future kumo is " + leadingKumoView + ".", text_color = (leadingKumoView == "bullish" ? color.green : (leadingKumoView == "bearish" ? color.red : color.white)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 1, "2. Price is " + priceWrtKumo + " kumo.", text_color = (priceWrtKumo == "above" ? color.green : (priceWrtKumo == "below" ? color.red : color.white)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 2, "3. Price is " + priceWrtTenkan + " tenkan.", text_color = priceWrtTenkan == "above" ? color.green : (priceWrtTenkan == "below" ? color.red : color.white), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 3, "4. Tenkan is " + tenkanWrtKijun + " kijun.", text_color = (tenkanWrtKijun == "above" ? color.green : (tenkanWrtKijun == "below" ? color.red : color.white)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 4, "5. TK cross was " + recentTkCross + " and " + tkCrossWrtKumo + " kumo.", text_color = (tkCrossWrtKumo == "above" ? (recentTkCross == "bullish" ? color.green : (recentTkCross == "bearish" ? color.rgb(255, 153, 153) : color.white)) : (tkCrossWrtKumo == "below" ? (recentTkCross == "bullish" ? color.rgb(182, 209, 186) : (recentTkCross == "bearish" ? color.red : color.white)) : color.gray)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 5, "6. Chikou is " + chikouWrtPrice + " price.", text_color = (chikouWrtPrice == "above" ? color.green : (chikouWrtPrice == "below" ? color.red : color.white)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 6, "7. Chikou is " + chikouWrtKumo + " kumo.", text_color = (chikouWrtKumo == "above" ? color.rgb(182, 209, 186) : (chikouWrtKumo == "below" ? color.rgb(255, 153, 153) : color.gray)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 7, "8. SSB " + (ssbProximityToChikou < 0 ? " may not block Chikou" : " might block Chikou at " + str.tostring(ssbProximityToChikou) + "%") + " for " + (chikouWrtKumo == "above" ? "long" : "short"  )+ " trade.", text_color = ( ssbProximityToChikou < 0 and marketView == "bullish" ? color.green : ( ssbProximityToChikou < 0 and marketView == "bearish" ? color.red : color.gray)), text_halign = text.align_left, text_size = size.small)
    table.cell(confluenceTable, 0, 8, "9. Chikou " + (isChikouSpanFree ? "clear from congestion." : " heading into " + str.tostring(congestionProximity) + " candles!"), text_color = (isChikouSpanFree ? (marketView == "bullish" ? color.green : (marketView == "bearish" ? color.red : color.gray)) : color.white), text_halign = text.align_left, text_size = size.small)
    
    if inShortTrade or inLongTrade
        table.cell(confluenceTable, 0, 9, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 10, "* Your trade is live! Respond to signals proactively.", text_color = color.aqua, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 11, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 12, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 13, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 14, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 15, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 16, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 17, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 18, "", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
    else
        table.cell(confluenceTable, 0, 9, "- Is current kumo thick?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 10, "- Is current kumo in flux?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 11, "- Is Senkou-Span-B flat & long?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 12, "- Is future kumo trending?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 13, "- Is kijun flat & long?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 14, "- Is 26 period high/low too far from the price?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 15, "- Does last 26 candle indicate kijun will trend?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 16, "- Are kumo shadows in the close proximity?", text_color = color.yellow, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 17, str.format("{0} {1}", (marketView == "bullish" ? "Go long upon" : (marketView == "bearish" ? "Go short upon" : "Hang on!")), (marketView == "bullish" ? str.tostring(longBreakoutPrice) + " breakout." : (marketView == "bearish" ? str.tostring(shortBreakoutPrice) + " breakout." : " Thange playbook is scanning for signals."))), text_color = color.aqua, text_halign = text.align_left, text_size = size.tiny)
        table.cell(confluenceTable, 0, 18, "Be ready with a limit-order at 9-period high/low.", text_color = color.aqua, text_halign = text.align_left, text_size = size.tiny)
