// Â© 2021
// @ govindthange

//@version=5
indicator("Thange Piccolo Playbook", shorttitle="Thange/Piccolo", overlay=true, max_labels_count=250)

//
// Collect configuration parameters
//

fromDateInput = input.time(timestamp("15 Oct 2021 05:30 +0300"), title="Backtest From Date")
toDateInput = input.time(timestamp("24 Nov 2021 05:30 +0300"), title="Backtest To Date")

int riskToRewardRatio = input.int(1, minval=1, title="Risk:Reward")
float ratioWrtRiskToBeginTrailingSL = input.float (1, minval=0, title="Nurture Phase", tooltip="It is a ratio w.r.t R/R. Until this level the programme will not show any exit signals. You should start trailing stop-loss only after the price crosses this level. This level shown by a red/green dotted line above/below the entry signal.")
int congestionProximity = input.int(10, minval=1, title="Congestion Span", tooltip="How many bars far should the lagging-span be and called safe before it bumps into the price?")
float congestionTolerance = input.float(0, minval=0.0, title="Congestion Tolerance", tooltip="What percent of the highest/lowest candle be compared with the lagging-span for determining noise in congestion?")
bool showSignalsUponBreakout = input.bool(true, "Show entry signals upon 9-period high/low breakout", tooltip="When enabled you can place a limit order for entry right at the price dipicted by the gray/green/red line.")

float accountSize = input.float(1000, title="Account Size")
float maxRisk = input.float(25, title="Maximum risk per position") / 100
float exitPercent = input.float(10, title="Scale out percent") / 100
int atrLength = input.int(30, minval=1, title="ATR Length")
float atrStopMultiplier = input.float(1.0, minval=0.1, title="ATR x ?")

bool showPnl = input.bool(false, title="Show profit & loss summary")
bool showTradePlan = input.bool(false, title="Show all entry & exits")
bool horizontalTradePlan = input.bool(false, title="Show trade plan horizontally")
bool showConfluenceInfo = input.bool(false, title="Show confluence Summary")

int tenkanSenPeriod = input.int(9, minval=1, title="Tenkan-Sen Length")
int kijunSenPeriod = input.int(26, minval=1, title="Kijun-Sen Length")
int senkouSpanBPeriod = input.int(52, minval=1, title="Leading Span B Length")
int displacement = input.int(26, minval=1, title="Displacement")

bool tkCrossExitEnabled = input.bool(true, title="Enable TK Cross Exits")
bool allowTkCrossExitInNurturePhase = input.bool(false, title="Allow TK cross exits in nurture phase")

bool allowEntryUponGaps = input.bool(false, "Show entry signals even on gap-up/down candles.", tooltip="This is not recommended!. This setting is only for study purposes.")
bool includeCurrentBarFor9PeriodHighLow = input.bool(false, title="Include current bar to show 9-period highs/lows", tooltip="This is not recommended!. This setting is only for study purposes.")

bool showL1DebugInfo = input.bool(false, title="Show Debug Info (Level 1)")



//########################################################
//########################################################
//####                                                ####
//####                  Declarations                  ####
//####                                                ####
//########################################################
//########################################################

// Standard constants
YES = 1.0
NO = 0.0

// Color definitions

sessionColor = color.rgb(0, 0, 0, 100)

longBgColor = color.rgb(0,255,0,94)
longLineColor = color.rgb(29, 176, 12, 0)
longPrimarySignalColor = color.rgb(29, 176, 12, 30)
longSecondarySignalColor = color.new(longPrimarySignalColor, 60)
shortBgColor = color.rgb(255,0,0,92)
shortLineColor = color.rgb(242, 10, 10, 0)
shortPrimarySignalColor = color.rgb(242, 10, 10, 30)
shortSecondarySignalColor = color.new(shortPrimarySignalColor, 60)

pnlLabelColor = color.new(color.black, 60)
pnlLabelProfitColor = color.green
pnlLabelProfitBgColor = color.new(longPrimarySignalColor, 87)
pnlLabelLossColor = color.red
pnlLabelLossBgColor = color.new(shortPrimarySignalColor, 85)

pnlLabelMaxCapitalColor =  color.new(color.blue, 45)
pnlLabelMaxCapitalTextColor =  color.yellow

// Initialize an empty array to store trading parameters
var context = array.new_float(15)

f_set(_key, _val) => array.set(context, _key, _val)

f_get(_key) => array.get(context, _key)

f_getString(_key) => str.tostring(array.get(context, _key))

f_true(_key) => f_get(_key) == YES

f_print(_text) =>
    // Create label on the first bar.
    var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.white, size.small, text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(_label, bar_index, ta.highest(10)[1])
    label.set_text(_label, _text)

// Create string format template to restrict SL precision to ticks.
f_tickFormat() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")




//###############################################
//###############################################
//####                                       ####
//####    Ichimoku Cloud - The Core Logic    ####
//####                                       ####
//###############################################
//#####33########################################

donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

tenkanSen = donchian(tenkanSenPeriod)
kijunSen = donchian(kijunSenPeriod)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = donchian(senkouSpanBPeriod)

barIndex = includeCurrentBarFor9PeriodHighLow ? 0 : 1
highestTenkanSenBar = ta.highestbars(high[barIndex], tenkanSenPeriod)
highestTenkanValue = ta.highest(high[barIndex], tenkanSenPeriod)
lowestTenkanSenBar = ta.lowestbars(low[barIndex], tenkanSenPeriod)
lowestTenkanValue = ta.lowest(low[barIndex], tenkanSenPeriod)

highestKijunSenBar = ta.highestbars(kijunSenPeriod)
highestKijunValue = ta.highest(kijunSenPeriod)
lowestKijunSenBar = ta.lowestbars(kijunSenPeriod)
lowestKijunValue = ta.lowest(kijunSenPeriod)

//f_print(str.format("##### highestBar: {0}, highest: {1}, lowestBar: {2}, lowest: {3}", ta.highestbars(tenkanSenPeriod), ta.highest(tenkanSenPeriod), ta.lowestbars(tenkanSenPeriod), ta.lowest(tenkanSenPeriod)))



//##########################################################################
//##########################################################################
//####                                                                  ####
//####    Assess for high probability setup on the trading timeframe    ####
//####                                                                  ####
//##########################################################################
//##########################################################################

// How is current kumo?
float temp = senkouSpanA[displacement-1] - senkouSpanB[displacement-1]
string kumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

// How is future kumo?
temp := senkouSpanA - senkouSpanB
string leadingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

// Where is price w.r.t kumo?
string priceWrtKumo = "within"
if ((kumoView == "bullish" or kumoView == "neutral") and close > senkouSpanA[displacement-1])
     or ((kumoView == "bearish" or kumoView == "neutral") and close > senkouSpanB[displacement-1])
    priceWrtKumo := "above"
else if ((kumoView == "bullish" or kumoView == "neutral") and close < senkouSpanB[displacement-1])
     or ((kumoView == "bearish" or kumoView == "neutral") and close < senkouSpanA[displacement-1])
    priceWrtKumo := "below"

//f_print(str.format("kumo: {0}, price {1}. ssA: {2, number}, ssB: {3, number}\n", kumoView, priceWrtKumo, senkouSpanA[displacement-1], senkouSpanB[displacement-1]))

// Where is price w.r.t tenkan?
string priceWrtTenkan = close > tenkanSen ? "above" : (close < tenkanSen ? "below" : "at")

// Where tenkan w.r.t kijun?
string tenkanWrtKijun = tenkanSen > kijunSen ? "above" : ( tenkanSen < kijunSen ? "below" : "at")

// Where is TK cross w.r.t kumo? <--- This is not a filter. Ignore!
var string recentTkCross = "unknown"

bool didNewTkCrossOccur = false
if (tenkanSen[1] <= kijunSen[1] and tenkanSen > kijunSen)
    recentTkCross := "bullish"
    didNewTkCrossOccur := true
else if (tenkanSen[1] >= kijunSen[1] and tenkanSen < kijunSen)
    recentTkCross := "bearish"
    didNewTkCrossOccur := true

var string tkCrossWrtKumo = "within"
if (didNewTkCrossOccur
     and kumoView == "bullish"
     and kijunSen > senkouSpanA[displacement-1])
     or (kumoView == "bearish" and kijunSen > senkouSpanB[displacement-1])
    tkCrossWrtKumo := "above"
else if (didNewTkCrossOccur
     and ((kumoView == "bullish" and kijunSen < senkouSpanB[displacement-1])
     or (kumoView == "bearish" and kijunSen < senkouSpanA[displacement-1])))
    tkCrossWrtKumo := "below"

//f_print("ten1: " + str.tostring(tenkanSen[1]) + ", kin1: " + str.tostring(kijunSen[1]) + ", t>k " + str.tostring(tenkanSen > kijunSen) + ", recentTkCross: " + recentTkCross + "\n\n")
//f_print("ten: " + str.tostring(tenkanSen) + ", kin: " + str.tostring(kijunSen) + ", t<k " + str.tostring(tenkanSen < kijunSen) + ", recentTkCross: " + recentTkCross + "\n")
//f_print("senkouSpanA[displacement-1]: " + str.tostring(senkouSpanA[displacement-1]) + ", senkouSpanB[displacement-1]: " + str.tostring(senkouSpanB[displacement-1]) + ", > " + str.tostring(kumoView))

// Where is chikou w.r.t price?
string chikouWrtPrice = "at"
if (close > high[displacement-1])
    chikouWrtPrice := "above"
else if (close < low[displacement-1])
    chikouWrtPrice := "below"

//f_print(str.tostring(displacement-1) + " bar price" + str.tostring(close[displacement-1]))

// Where is chikou w.r.t kumo?
temp := senkouSpanA[2*displacement-1] - senkouSpanB[2*displacement-1]
string laggingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

string chikouWrtKumo = "within"
if (laggingKumoView == "bullish" and close > senkouSpanA[2*displacement-1])
     or (kumoView == "bearish" and close > senkouSpanB[2*displacement-1])
    chikouWrtKumo := "above"
else if (laggingKumoView == "bullish" and close < senkouSpanB[2*displacement-1])
     or (laggingKumoView == "bearish" and close < senkouSpanA[2*displacement-1])
    chikouWrtKumo := "below"

// Where is chikou w.r.t a flat Senkou-Span-B ahead?

// Is chikou free from congestion ahead? Is it heading into price?

highestForChikou = (1-congestionTolerance/100) * ta.highest(high[displacement-congestionProximity], congestionProximity)
lowestForChikou = (1-congestionTolerance/100) * ta.lowest(low[displacement-congestionProximity], congestionProximity)

isChikouSpanFree = chikouWrtPrice == "above" ? (close > highestForChikou) : chikouWrtPrice == "below" ? (close < lowestForChikou) : false
//f_print("isChikouSpanFree: " + str.tostring(isChikouSpanFree) + " in the next " + str.tostring(congestionProximity) + " bars, highest: " + str.tostring(highestForChikou) + ", lowest: " + str.tostring(lowestForChikou) + "\n")


// Declare constants to access global variables
IDX_PriceLevelToBeginTrailingStopLoss = 0
IDX_ShouldExitOnStopLoss = 1
IDX_CanExitAfterKijunOrTkCross = 2
IDX_ShouldExitOnTkCross = 3
IDX_TxCrossPrice = 4

f_reset() =>
    f_set(IDX_PriceLevelToBeginTrailingStopLoss, -1)
    f_set(IDX_ShouldExitOnStopLoss, NO)
    f_set(IDX_CanExitAfterKijunOrTkCross, NO)
    f_set(IDX_ShouldExitOnTkCross, NO)
    f_set(IDX_TxCrossPrice, -1)
    



//##########################################################################
//##########################################################################
//####                                                                  ####
//####             Establish market view through confluence             ####
//####                                                                  ####
//##########################################################################
//##########################################################################

string marketView = "conslidating"
if priceWrtKumo == "above"
     and priceWrtTenkan == "above"
     and tenkanWrtKijun == "above"
     and leadingKumoView == "bullish"
     and chikouWrtPrice == "above"
     and isChikouSpanFree
    marketView := "bullish"
else if priceWrtKumo == "below"
     and priceWrtTenkan == "below"
     and tenkanWrtKijun == "below"
     and leadingKumoView == "bearish"
     and chikouWrtPrice == "below"
     and isChikouSpanFree
    marketView := "bearish"

lowestSSB = ta.lowest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)
highestSSB = ta.highest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)

float ssbProximityToChikou = -1.0
if (marketView == "bullish" and chikouWrtKumo == "below")
    ssbProximityToChikou := (lowestSSB - close)*100/close
    //f_print(">> overhead resistance at " + str.tostring(ssbProximityToChikou))
else if (marketView == "bearish" and chikouWrtKumo == "above")
    ssbProximityToChikou := (close - lowestSSB)*100/close
    //f_print(">> underlying support at " + str.tostring(ssbProximityToChikou) + "\n")

// Asssess exit scenarios

var inLongTrade = false
var inShortTrade = false

// Where is price w.r.t kijun?
string priceWrtKijun = "unknown"
if inLongTrade // for exiting in a long position
    priceWrtKijun := low < kijunSen ? "below" : (low > kijunSen ? "above" : "at")
else if inShortTrade // for exiting in a short position
    priceWrtKijun := high < kijunSen ? "below" : (high > kijunSen ? "above" : "at")
else // for confluence to enter position
    priceWrtKijun := close < kijunSen ? "below" : (close > kijunSen ? "above" : "at")

//f_print("low: " + str.tostring(low) + ", kijun: " + str.tostring(kijunSen) + ", = " + priceWrtKijun)

atr = ta.atr(atrLength) * atrStopMultiplier

var bool hasSignaledForLong = false
var bool hasSignaledForShort = false

bool didLongPositionClose = false
bool didShortPositionClose = false

bool didCandleGap = (open > high[1] and low > high[1]) or (open < low[1] and high < low[1])
//plotshape(not allowEntryUponGaps and didCandleGap, title= "Candle Gap Up/Down", location=location.belowbar, color=color.gray, transp=0, style=shape.arrowup, text="", size=size.normal, editable=false)

bool withinTestRange = (time >= fromDateInput and time <= toDateInput)




//###############################################################
//###############################################################
//####                                                       ####
//####                   Play LONG Signal                    ####
//####                                                       ####
//###############################################################
//###############################################################

var canPrepareForLong = false
var shouldGoLong = false
var shouldSellOnTenkan = false
var shouldSellOnKijun = false
var shouldSellOnTkCross = false
var shouldSellOnStopLoss = false
var shouldSellOnLimitOrder = false
var didSellOnLimitOrder = false
var shouldPreemptivelyExitLong = false

var longBreakoutPrice = 0.0
var longEntryPrice = 0.0
var longStopLoss = 0.0
var tenkanSellPrice1 = 0.0
var tenkanSellPrice2 = 0.0
var tenkanSellPrice3 = 0.0
var tenkanSellPrice4 = 0.0
var tenkanSellPrice5 = 0.0
var tenkanSellPrice6 = 0.0
var tenkanSellPrice7 = 0.0
var tenkanSellPrice8 = 0.0
var tenkanSellPrice9 = 0.0
var tenkanSellPrice10 = 0.0
var kijunSellPrice = 0.0
var tkCrossSellPrice = 0.0
var sellLimitOrder = 0.0

if not inLongTrade
    shouldSellOnKijun := false
    //shouldScaleOut := true
    shouldSellOnTenkan := false
    shouldSellOnTkCross := false
    shouldSellOnStopLoss := false
    shouldSellOnLimitOrder := false
    didSellOnLimitOrder := false
    shouldPreemptivelyExitLong := false

    longEntryPrice := 0.0
    longStopLoss := 0.0
    tenkanSellPrice1 := 0.0
    tenkanSellPrice2 := 0.0
    tenkanSellPrice3 := 0.0
    tenkanSellPrice4 := 0.0
    tenkanSellPrice5 := 0.0
    tenkanSellPrice6 := 0.0
    tenkanSellPrice7 := 0.0
    tenkanSellPrice8 := 0.0
    tenkanSellPrice9 := 0.0
    tenkanSellPrice10 := 0.0
    kijunSellPrice := 0.0
    tkCrossSellPrice := 0.0
    sellLimitOrder := 0.0

if (inLongTrade and high > f_get(IDX_PriceLevelToBeginTrailingStopLoss))
    f_set(IDX_CanExitAfterKijunOrTkCross, YES)

//f_print("[L1] inLongTrade: " + str.tostring(inLongTrade) + ", high: " + str.tostring(high) + ", f_get(IDX_PriceLevelToBeginTrailingStopLoss): = " + str.tostring(f_get(IDX_PriceLevelToBeginTrailingStopLoss)) + ", condition? = " + str.tostring((inLongTrade and high > f_get(IDX_PriceLevelToBeginTrailingStopLoss))) + "\n")

if (inLongTrade and low <= longStopLoss)
    f_set(IDX_ShouldExitOnStopLoss, YES)
    shouldSellOnStopLoss = true

if (inLongTrade and priceWrtKijun == "below" and f_true(IDX_CanExitAfterKijunOrTkCross))
    shouldSellOnKijun := true
    //shouldScaleOut := true
    kijunSellPrice := kijunSen

//f_print(str.format("shouldExitOnStop: {0}, priceWrtKijun: {1} and IDX_CanExitAfterKijunOrTkCross: {2} => sellOnKijun: {3}\n\n\n", f_getString(IDX_ShouldExitOnStopLoss), priceWrtKijun, f_getString(IDX_CanExitAfterKijunOrTkCross), str.tostring(shouldSellOnKijun)))

if (inLongTrade and recentTkCross == "bearish"
     and tkCrossExitEnabled
     and (allowTkCrossExitInNurturePhase or (not allowTkCrossExitInNurturePhase and f_true(IDX_CanExitAfterKijunOrTkCross))))
    shouldSellOnTkCross := true
    //shouldScaleOut := true
    tkCrossSellPrice := close

plotshape(inLongTrade and marketView == "bearish", title= "Stop Loss Long Exit", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)
if (inLongTrade and marketView == "bearish")
    shouldPreemptivelyExitLong := true

//f_print("[L1] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldSellOnKijun) + ", bullishConf? = " + str.tostring(hasBullishConfluence) + "\n")

canPrepareForLong := withinTestRange
                         and (allowEntryUponGaps or not didCandleGap)
                         and not inLongTrade
                         and not inShortTrade
                         and marketView == "bullish"

//f_print(str.format("[1] prepare? {0}, signaled? {1}, {2} breakout*? {3}, confluence? {4} -- currentPrice: {5}, inLong? {6}\n\n\n", canPrepareForLong, hasSignaledForLong, highestTenkanValue, str.tostring(close >= longBreakoutPrice), marketView, close, inLongTrade))

if showSignalsUponBreakout
    if not canPrepareForLong
        hasSignaledForLong := false
        longBreakoutPrice := 0.0
    else if canPrepareForLong and not hasSignaledForLong
        longBreakoutPrice := highestTenkanValue
        // Draw 9-period high line to indicate the best entry point
        //f_print(str.format("9-period-highest-bar: {0}, 9-period-highest: {1}", str.tostring(highestTenkanSenBar), str.tostring(highestTenkanValue)))
        line.new(bar_index-tenkanSenPeriod, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
        line.new(bar_index+highestTenkanSenBar-1, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=longLineColor, style=line.style_solid)
else if canPrepareForLong
    // Draw 9-period high line to indicate the best entry point
    //f_print(str.format("9-period-highest-bar: {0}, 9-period-highest: {1}", str.tostring(highestTenkanSenBar), str.tostring(highestTenkanValue)))
    line.new(bar_index-tenkanSenPeriod, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
    line.new(bar_index+highestTenkanSenBar-1, highestTenkanValue, bar_index, highestTenkanValue, width=1, color=longLineColor, style=line.style_solid)

//f_print(str.format("[2] prepare? {0}, signaled? {1}, {2} breakout? {3}, confluence? {4} -- currentPrice: {5}", canPrepareForLong, hasSignaledForLong, longBreakoutPrice, str.tostring(high >= longBreakoutPrice), marketView, close))

if canPrepareForLong
     and (not showSignalsUponBreakout or high >= longBreakoutPrice)
    shouldGoLong := true
    hasSignaledForLong := false
    inLongTrade := true
    shouldSellOnKijun := false
    longEntryPrice := showSignalsUponBreakout ? longBreakoutPrice : close
    longBreakoutPrice := 0.0
    longStopLoss := kijunSen - atr
    if longStopLoss > low
        longStopLoss := low - atr
    sellLimitOrder := longEntryPrice + (longEntryPrice - longStopLoss) * riskToRewardRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, longEntryPrice + (longEntryPrice - longStopLoss) * ratioWrtRiskToBeginTrailingSL)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=2, color=longLineColor, style=line.style_dotted)
    line.new(bar_index, longStopLoss, bar_index+10, longStopLoss, width=2, color=longLineColor, style=line.style_solid)

if (inLongTrade and not shouldSellOnKijun and close < tenkanSen and close[1] >= tenkanSen[1])
    shouldSellOnTenkan := true
    if (tenkanSellPrice1 == 0.0)
        tenkanSellPrice1 := close
    else if (tenkanSellPrice2 == 0.0)
        tenkanSellPrice2 := close
    else if (tenkanSellPrice3 == 0.0)
        tenkanSellPrice3 := close
    else if (tenkanSellPrice4 == 0.0)
        tenkanSellPrice4 := close
    else if (tenkanSellPrice5 == 0.0)
        tenkanSellPrice5 := close
    else if (tenkanSellPrice6 == 0.0)
        tenkanSellPrice6 := close
    else if (tenkanSellPrice7 == 0.0)
        tenkanSellPrice7 := close
    else if (tenkanSellPrice8 == 0.0)
        tenkanSellPrice8 := close
    else if (tenkanSellPrice9 == 0.0)
        tenkanSellPrice9 := close
    else if (tenkanSellPrice10 == 0.0)
        tenkanSellPrice10 := close
else
    shouldSellOnTenkan := false
    
if (inLongTrade and not didSellOnLimitOrder and high >= sellLimitOrder)
    shouldSellOnLimitOrder := true

//f_print("[3] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldSellOnKijun) + ", canPrepareForLong: " + str.tostring(canPrepareForLong) + "\n\n")

// Plot LONG signals based on confluence
plotshape(showSignalsUponBreakout and canPrepareForLong and not hasSignaledForLong and not shouldGoLong, title= "Prepare to go long", location=location.belowbar, color=color.teal, transp=0, style=shape.triangleup, text="", size=size.tiny, editable=false)
if showSignalsUponBreakout and canPrepareForLong
    canPrepareForLong := false // reset flag
    if showSignalsUponBreakout
        hasSignaledForLong := true

//f_print(str.format("[4] PRINT BUY SIGNAL: showSignalsUponBreakout:{0}, canPrepareForLong: {1} {2}\n\n\n\n", str.tostring(showSignalsUponBreakout), str.tostring(canPrepareForLong), str.tostring(not showSignalsUponBreakout and canPrepareForLong)))
plotshape((showSignalsUponBreakout and shouldGoLong) or (not showSignalsUponBreakout and canPrepareForLong), title="Long Entry A", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.triangleup, text="", size=size.small, editable=false)
plotshape((showSignalsUponBreakout and shouldGoLong) or (not showSignalsUponBreakout and canPrepareForLong), title="Long Entry B", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.triangleup, text="", size=size.tiny, editable=false)
if not showSignalsUponBreakout
    canPrepareForLong := false
else if shouldGoLong
    shouldGoLong := false

plotshape(shouldSellOnTenkan, title= "Tenkan Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.diamond, text="", size=size.tiny, editable=false)

plotshape(shouldSellOnKijun, title= "Kijun Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.circle, text="", size=size.tiny, editable=false)

plotshape(shouldSellOnTkCross, title= "TK Cross Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.xcross, text="", size=size.small, editable=false)

plotshape(inLongTrade and (f_true(IDX_ShouldExitOnStopLoss) or shouldSellOnStopLoss), title= "Stop Loss Long Exit", location=location.belowbar, color=longPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)

plotshape(shouldSellOnLimitOrder, title= "Fixed Long Exit", location=location.abovebar, color=longSecondarySignalColor, transp=0, style=shape.square, text="", size=size.tiny, editable=false)

if shouldSellOnLimitOrder
    didSellOnLimitOrder := true
    shouldSellOnLimitOrder := false

// Draw labels to enter or trail a stop-loss order based on confluence

//f_print(str.format("{0}, inLongTrade: {1}, withinRange: {2}", (shouldSellOnKijun or f_true(IDX_ShouldExitOnStopLoss)), inLongTrade, withinTestRange))




//##############################################################
//##############################################################
//####                                                      ####
//####                  Play SHORT Signal                   ####
//####                                                      ####
//##############################################################
//##############################################################

var canPrepareForShort = false
var shouldGoShort = false
var shouldBuyOnTenkan = false
var shouldBuyOnKijun = false
var shouldBuyOnTkCross = false
var shouldBuyOnStopLoss = false
var shouldBuyOnLimitOrder = false
var didBuyOnLimitOrder = false
var shouldPreemptivelyExitShort = false

var shortBreakoutPrice = 0.0
var shortEntryPrice = 0.0
var shortStopLoss = 0.0
var tenkanBuyPrice1 = 0.0
var tenkanBuyPrice2 = 0.0
var tenkanBuyPrice3 = 0.0
var tenkanBuyPrice4 = 0.0
var tenkanBuyPrice5 = 0.0
var tenkanBuyPrice6 = 0.0
var tenkanBuyPrice7 = 0.0
var tenkanBuyPrice8 = 0.0
var tenkanBuyPrice9 = 0.0
var tenkanBuyPrice10 = 0.0
var kijunBuyPrice = 0.0
var tkCrossBuyPrice = 0.0
var buyLimitOrder = 0.0

if not inShortTrade
    shouldBuyOnKijun := false
    //shouldScaleOut := true
    shouldBuyOnTkCross := false
    shouldBuyOnStopLoss := false
    shouldBuyOnLimitOrder := false
    didBuyOnLimitOrder := false
    shouldPreemptivelyExitShort := false
    
    shortEntryPrice := 0.0
    shortStopLoss := 0.0
    tenkanBuyPrice1 := 0.0
    tenkanBuyPrice2 := 0.0
    tenkanBuyPrice3 := 0.0
    tenkanBuyPrice4 := 0.0
    tenkanBuyPrice5 := 0.0
    tenkanBuyPrice6 := 0.0
    tenkanBuyPrice7 := 0.0
    tenkanBuyPrice8 := 0.0
    tenkanBuyPrice9 := 0.0
    tenkanBuyPrice10 := 0.0
    kijunBuyPrice := 0.0
    tkCrossBuyPrice := 0.0
    buyLimitOrder := 0.0

if (inShortTrade and low < f_get(IDX_PriceLevelToBeginTrailingStopLoss))
    f_set(IDX_CanExitAfterKijunOrTkCross, YES)

if (inShortTrade and high >= shortStopLoss)
    f_set(IDX_ShouldExitOnStopLoss, YES)
    shouldBuyOnStopLoss = true

//f_print("low: " + str.tostring(low) + ", shortSL: " + str.tostring(shortStopLoss) +", finalSL: " + f_getString(IDX_PriceLevelToBeginTrailingStopLoss) + ", useKijonAsSL: " + f_getString(IDX_CanExitAfterKijunOrTkCross)+ ", shouldExitOnSL: " + f_getString(IDX_ShouldExitOnStopLoss))

if (inShortTrade and priceWrtKijun == "above" and f_true(IDX_CanExitAfterKijunOrTkCross))
    shouldBuyOnKijun := true
    //shouldScaleOut := true
    kijunBuyPrice := kijunSen

if (inShortTrade and recentTkCross == "bullish"
     and tkCrossExitEnabled
     and (allowTkCrossExitInNurturePhase or (not allowTkCrossExitInNurturePhase and f_true(IDX_CanExitAfterKijunOrTkCross))))
    shouldBuyOnTkCross := true
    //shouldScaleOut := true
    tkCrossBuyPrice := close

plotshape(inShortTrade and marketView == "bullish", title= "Stop Loss Short Exit", location=location.belowbar, color=shortPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)
if (inShortTrade and marketView == "bullish")
    shouldPreemptivelyExitShort := true

//f_print("[S1] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldBuyOnKijun) + ", bearishConf? = " + str.tostring(hasBearishConfluence) + ", isPriceAboveKijunsen? = " + str.tostring(isPriceAboveKijunSen) + "\n\n\n")

canPrepareForShort :=  withinTestRange
                         and (allowEntryUponGaps or not didCandleGap)
                         and not inShortTrade
                         and not inLongTrade
                         and marketView == "bearish"

if showSignalsUponBreakout
    if not canPrepareForShort
        hasSignaledForShort := false
        shortBreakoutPrice := 0.0
    else if canPrepareForShort and not hasSignaledForShort
        shortBreakoutPrice := lowestTenkanValue
        // Draw 9-period high line to indicate the best entry point
        //f_print(str.format("9-period-lowest-bar: {0}, 9-period-lowest: {1}", lowestTenkanSenBar, lowestTenkanValue))
        line.new(bar_index-tenkanSenPeriod, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
        line.new(bar_index+lowestTenkanSenBar-1, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=shortLineColor, style=line.style_solid)
else if canPrepareForShort
    // Draw 9-period high line to indicate the best entry point
    //f_print(str.format("9-period-lowest-bar: {0}, 9-period-lowest: {1}", lowestTenkanSenBar, lowestTenkanValue))
    line.new(bar_index-tenkanSenPeriod, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=color.silver, style=line.style_dotted)
    line.new(bar_index+lowestTenkanSenBar-1, lowestTenkanValue, bar_index, lowestTenkanValue, width=1, color=shortLineColor, style=line.style_solid)

if canPrepareForShort
     and (not showSignalsUponBreakout or low <= shortBreakoutPrice)
    shouldGoShort := true
    hasSignaledForShort := false
    inShortTrade := true
    shouldBuyOnKijun := false
    shortEntryPrice := showSignalsUponBreakout ? shortBreakoutPrice : close
    shortBreakoutPrice := 0.0
    shortStopLoss := kijunSen + atr
    if shortStopLoss < high
        shortStopLoss := high + atr
    //f_print(str.format("sl: {0}, high: {1}", shortStopLoss, high))
    buyLimitOrder := shortEntryPrice - (shortStopLoss - shortEntryPrice) * riskToRewardRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, shortEntryPrice + (shortEntryPrice - shortStopLoss) * ratioWrtRiskToBeginTrailingSL)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=2, color=shortLineColor, style=line.style_dotted)
    line.new(bar_index, shortStopLoss, bar_index+10, shortStopLoss, width=2, color=shortLineColor, style=line.style_solid)

if (inShortTrade and not shouldBuyOnKijun and close > tenkanSen and close[1] <= tenkanSen[1])
    shouldBuyOnTenkan := true
    if (tenkanBuyPrice1 == 0.0)
        tenkanBuyPrice1 := close
    else if (tenkanBuyPrice2 == 0.0)
        tenkanBuyPrice2 := close
    else if (tenkanBuyPrice3 == 0.0)
        tenkanBuyPrice3 := close
    else if (tenkanBuyPrice4 == 0.0)
        tenkanBuyPrice4 := close
    else if (tenkanBuyPrice5 == 0.0)
        tenkanBuyPrice5 := close
    else if (tenkanBuyPrice6 == 0.0)
        tenkanBuyPrice6 := close
    else if (tenkanBuyPrice7 == 0.0)
        tenkanBuyPrice7 := close
    else if (tenkanBuyPrice8 == 0.0)
        tenkanBuyPrice8 := close
    else if (tenkanBuyPrice9 == 0.0)
        tenkanBuyPrice9 := close
    else if (tenkanBuyPrice10 == 0.0)
        tenkanBuyPrice10 := close
else
    shouldBuyOnTenkan := false
    
if (inShortTrade and not didBuyOnLimitOrder and low <= buyLimitOrder)
    shouldBuyOnLimitOrder := true

//f_print("[S2] inShortTrade: " + str.tostring(inShortTrade) + ", didBuyOnLimitOrder? = " + str.tostring(didBuyOnLimitOrder) + ", low: " + str.tostring(low) + ", buyLimitOrder: = " + str.tostring(buyLimitOrder) + ", shouldBuyOnLimitOrder: = " + str.tostring(shouldBuyOnLimitOrder) + "\n\n\n\n")

//f_print("[S2] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldBuyOnKijun) + ", canPrepareForShort: " + str.tostring(canPrepareForShort) + ", isPriceAboveKijunsen? = " + str.tostring(isPriceAboveKijunSen) + "\n\n\n\n")

// Plot SHORT signals based on confluence
plotshape(showSignalsUponBreakout and canPrepareForShort and not hasSignaledForShort and not shouldGoShort, title= "Prepare to go short", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="", size=size.tiny, editable=false)
if showSignalsUponBreakout and canPrepareForShort
    canPrepareForShort := false // reset flag
    if showSignalsUponBreakout
        hasSignaledForShort := true

plotshape((showSignalsUponBreakout and shouldGoShort) or (not showSignalsUponBreakout and canPrepareForShort), title= "Short Entry A", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.triangledown, text="", size=size.small, editable=false)
plotshape((showSignalsUponBreakout and shouldGoShort) or (not showSignalsUponBreakout and canPrepareForShort), title= "Short Entry B", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.triangledown, text="", size=size.tiny, editable=false)
if not showSignalsUponBreakout
    canPrepareForShort := false
else if shouldGoShort
    shouldGoShort := false

plotshape(shouldBuyOnTenkan, title= "Tenkan Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.diamond, text="", size=size.tiny, editable=false)

plotshape(shouldBuyOnKijun, title= "Kijun Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.circle, text="", size=size.tiny, editable=false)

plotshape(shouldBuyOnTkCross, title= "TK Cross Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.xcross, text="", size=size.small, editable=false)

plotshape(inShortTrade and (f_true(IDX_ShouldExitOnStopLoss) or shouldBuyOnStopLoss), title= "Stop Loss Short Exit", location=location.abovebar, color=shortPrimarySignalColor, transp=0, style=shape.flag, text="", size=size.small, editable=false)

plotshape(shouldBuyOnLimitOrder, title= "Fixed Short Exit", location=location.belowbar, color=shortSecondarySignalColor, transp=0, style=shape.square, text="", size=size.tiny, editable=false)

if shouldBuyOnLimitOrder
    didBuyOnLimitOrder := true
    shouldBuyOnLimitOrder := false
    



//################################################################
//################################################################
//####                                                        ####
//####                  Close Open Positions                  ####
//####                                                        ####
//################################################################
//################################################################

if (inLongTrade and (shouldSellOnKijun or f_true(IDX_ShouldExitOnStopLoss) or shouldSellOnTkCross or shouldPreemptivelyExitLong))
    inLongTrade := false
    f_reset()
    didLongPositionClose := true
    shouldSellOnStopLoss := false
    if showSignalsUponBreakout
        hasSignaledForLong := false
        canPrepareForLong := false

if (inShortTrade and (shouldBuyOnKijun or f_true(IDX_ShouldExitOnStopLoss) or shouldBuyOnTkCross or shouldPreemptivelyExitShort))
    inShortTrade := false
    f_reset()
    didShortPositionClose := true
    shouldBuyOnStopLoss := false
    if showSignalsUponBreakout
        hasSignaledForLong := false
        canPrepareForLong := false




//##############################################################
//##############################################################
//####                                                      ####
//####                   Background Color                   ####
//####                                                      ####
//##############################################################
//##############################################################

if inLongTrade
    sessionColor := longBgColor
else if inShortTrade
    sessionColor := shortBgColor
else if withinTestRange
    sessionColor := color.rgb(0, 0, 0, 60)

bgcolor(sessionColor, editable=false)




//###############################################################
//###############################################################
//####                                                       ####
//####                     Profit & Loss                     ####
//####                                                       ####
//###############################################################
//###############################################################

var int totalCandles = 0
if withinTestRange
    totalCandles := totalCandles + 1

float maxRiskPerPosition = accountSize * maxRisk
float qty = 0.0, tradeSize = 0.0, pnl = 0.0, remainingUnitsAllocation = 0.0, remainingPercentAllocation = 1.0

var int winners = 0
var int loosers = 0
var int totalTrades = 0
var float cumulativeCapital = 0.0
var float maxCapital = 0.0
var float totalPnl = 0.0
var float prevPnl = 0.0
var float prevPnlPercent = 0.0
var float maxProfit = 0.0
var float maxLoss = 0.0

float ep = 0.0, sl = 0.0, tp1 = 0.0, tp2 = 0.0, tp3 = 0.0, tp4 = 0.0, tp5 = 0.0, tp6 = 0.0, tp7 = 0.0, tp8 = 0.0, tp9 = 0.0, tp10 = 0.0, lim = 0.0, kp = 0.0, tkcp = 0.0
float realtime = 0.0

// Temporary variables for debugging
float t1 = 0.0, t2 = 0.0, t3 = 0.0, t4 = 0.0, t5 = 0.0, t6 =0.0, t7 = 0.0, t8 = 0.0, t9 = 0.0, t10 = 0.0, k = 0.0, tkc = 0.0, s = 0.0, lo = 0.0, dt1 = 0.0, dt2 = 0.0, dt3 = 0.0, dt4 = 0.0, dt5 = 0.0, dt6 = 0.0, dt7 = 0.0, dt8 = 0.0, dt9 = 0.0, dt10 = 0.0, dk = 0.0, dlo = 0.0
if not inLongTrade and not inShortTrade
    ep :=0, sl :=0, tp1 :=0, tp2 :=0, tp3 :=0, tp4 :=0, tp5 :=0, tp6 :=0, tp7 :=0, tp8 :=0, tp9 :=0, tp10 :=0, lo :=0, kp :=0
    t1 := 0, t2 := 0, t3 := 0, t4 := 0, t5 := 0, t6 :=0, t7 := 0, t8 := 0, t9 := 0, t10 := 0, k := 0, lo := 0, dt1 := 0, dt2 := 0, dt3 := 0, dt4 := 0, dt5 := 0, dt6 :=0, dt7 := 0, dt8 := 0, dt9 := 0, dt10 := 0, dk := 0, dlo := 0

if inLongTrade or didLongPositionClose
    ep := longEntryPrice
    sl := longStopLoss
    qty := maxRiskPerPosition / (longEntryPrice - longStopLoss)
    tradeSize := qty * longEntryPrice
    remainingUnitsAllocation := qty
    
    if sellLimitOrder > 0 and didSellOnLimitOrder and remainingPercentAllocation > 0
        lim := sellLimitOrder
        dlo := (sellLimitOrder - longEntryPrice) 
        lo := dlo * exitPercent * qty
        pnl := pnl + lo
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice1 > 0 and remainingPercentAllocation > 0
        tp1 := tenkanSellPrice1
        dt1 := (tenkanSellPrice1 - longEntryPrice)
        t1 := dt1 * exitPercent * qty
        pnl := pnl + t1
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice2 > 0 and remainingPercentAllocation > 0
        tp2 := tenkanSellPrice2
        dt2 := (tenkanSellPrice2 - longEntryPrice)
        t2 := dt2 * exitPercent * qty
        pnl := pnl + t2
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice3 > 0 and remainingPercentAllocation > 0
        tp3 := tenkanSellPrice3
        dt3 := (tenkanSellPrice3 - longEntryPrice)
        t3 := dt3 * exitPercent * qty
        pnl := pnl + t3
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice4 > 0 and remainingPercentAllocation > 0
        tp4 := tenkanSellPrice4
        dt4 := (tenkanSellPrice4 - longEntryPrice)
        t4 := dt4 * exitPercent * qty
        pnl := pnl + t4
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice5 > 0 and remainingPercentAllocation > 0
        tp5 := tenkanSellPrice5
        dt5 := (tenkanSellPrice5 - longEntryPrice)
        t5 := dt5 * exitPercent * qty
        pnl := pnl + t5
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice6 > 0 and remainingPercentAllocation > 0
        tp6 := tenkanSellPrice6
        dt6 := (tenkanSellPrice6 - longEntryPrice)
        t6 := dt6 * exitPercent * qty
        pnl := pnl + t6
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice7 > 0 and remainingPercentAllocation > 0
        tp7 := tenkanSellPrice7
        dt7 := (tenkanSellPrice7 - longEntryPrice)
        t7 := dt7 * exitPercent * qty
        pnl := pnl + t7
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice8 > 0 and remainingPercentAllocation > 0
        tp8 := tenkanSellPrice8
        dt8 := (tenkanSellPrice8 - longEntryPrice)
        t8 := dt8 * exitPercent * qty
        pnl := pnl + t8
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice9 > 0 and remainingPercentAllocation > 0
        tp9 := tenkanSellPrice9
        dt9 := (tenkanSellPrice9 - longEntryPrice)
        t9 := dt9 * exitPercent * qty
        pnl := pnl + t9
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice10 > 0 and remainingPercentAllocation > 0
        tp10 := tenkanSellPrice10
        dt10 := (tenkanSellPrice10 - longEntryPrice)
        t10 := dt10 * exitPercent * qty
        pnl := pnl + t10
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if kijunSellPrice > 0 and remainingPercentAllocation > 0
        kp := kijunSellPrice
        if kijunSellPrice < longStopLoss
            k := (longStopLoss - longEntryPrice) * remainingUnitsAllocation
            pnl := pnl + k
        else
            pnl := pnl + (kijunSellPrice - longEntryPrice) * remainingUnitsAllocation
    else if tkCrossSellPrice > 0 and remainingPercentAllocation > 0
        tkcp := tkCrossSellPrice
        if tkCrossSellPrice < longStopLoss
            tkc := (longStopLoss - longEntryPrice) * remainingUnitsAllocation
            pnl := pnl + tkc
        else
            pnl := pnl + (tkCrossSellPrice - longEntryPrice) * remainingUnitsAllocation
    else if shouldSellOnStopLoss and remainingPercentAllocation > 0
        s := (longStopLoss - longEntryPrice) * remainingUnitsAllocation
        pnl := pnl + s
    else if shouldPreemptivelyExitLong and remainingPercentAllocation > 0
        realtime := (close - longEntryPrice) * remainingUnitsAllocation
        if close < longStopLoss
            pnl := pnl + ((longStopLoss - longEntryPrice) * remainingUnitsAllocation)
        else
            pnl := pnl + realtime
    else
        realtime := (close - longEntryPrice) * remainingUnitsAllocation

if inShortTrade or didShortPositionClose
    ep := shortEntryPrice
    sl := shortStopLoss
    qty := maxRiskPerPosition / (shortStopLoss - shortEntryPrice)
    tradeSize := qty * shortEntryPrice
    remainingUnitsAllocation := qty
    
    if buyLimitOrder > 0 and didBuyOnLimitOrder and remainingPercentAllocation > 0
        lim := buyLimitOrder
        dlo := (shortEntryPrice - buyLimitOrder) 
        lo := dlo * exitPercent * qty
        pnl := pnl + lo
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice1 > 0 and remainingPercentAllocation > 0
        tp1 := tenkanBuyPrice1
        dt1 := (shortEntryPrice - tenkanBuyPrice1)
        t1 := dt1 * exitPercent * qty
        pnl := pnl + t1
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice2 > 0 and remainingPercentAllocation > 0
        tp2 := tenkanBuyPrice2
        dt2 := (shortEntryPrice - tenkanBuyPrice2)
        t2 := dt2 * exitPercent * qty
        pnl := pnl + t2
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice3 > 0 and remainingPercentAllocation > 0
        tp3 := tenkanBuyPrice3
        dt3 := (shortEntryPrice - tenkanBuyPrice3)
        t3 := dt3 * exitPercent * qty
        pnl := pnl + t3
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice4 > 0 and remainingPercentAllocation > 0
        tp4 := tenkanBuyPrice4
        dt4 := (shortEntryPrice - tenkanBuyPrice4)
        t4 := dt4 * exitPercent * qty
        pnl := pnl + t4
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice5 > 0 and remainingPercentAllocation > 0
        tp5 := tenkanBuyPrice5
        dt5 := (shortEntryPrice - tenkanBuyPrice5)
        t5 := dt5 * exitPercent * qty
        pnl := pnl + t5
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice6 > 0 and remainingPercentAllocation > 0
        tp6 := tenkanBuyPrice6
        dt6 := (shortEntryPrice - tenkanBuyPrice6)
        t6 := dt6 * exitPercent * qty
        pnl := pnl + t6
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice7 > 0 and remainingPercentAllocation > 0
        tp7 := tenkanBuyPrice7
        dt7 := (shortEntryPrice - tenkanBuyPrice7)
        t7 := dt7 * exitPercent * qty
        pnl := pnl + t7
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice8 > 0 and remainingPercentAllocation > 0
        tp8 := tenkanBuyPrice8
        dt8 := (shortEntryPrice - tenkanBuyPrice8)
        t8 := dt8 * exitPercent * qty
        pnl := pnl + t8
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice9 > 0 and remainingPercentAllocation > 0
        tp9 := tenkanBuyPrice9
        dt9 := (shortEntryPrice - tenkanBuyPrice9)
        t9 := dt9 * exitPercent * qty
        pnl := pnl + t9
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice10 > 0 and remainingPercentAllocation > 0
        tp10 := tenkanBuyPrice10
        dt10 := (shortEntryPrice - tenkanBuyPrice10)
        t10 := dt10 * exitPercent * qty
        pnl := pnl + t10
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if kijunBuyPrice > 0 and remainingPercentAllocation > 0
        kp := kijunBuyPrice
        if kijunBuyPrice > shortStopLoss
            k := (shortEntryPrice - shortStopLoss) * remainingUnitsAllocation
            pnl := pnl + k
        else
            pnl := pnl + (shortEntryPrice - kijunBuyPrice) * remainingUnitsAllocation
    else if tkCrossBuyPrice > 0 and remainingPercentAllocation > 0
        tkcp := tkCrossBuyPrice
        if tkCrossBuyPrice > shortStopLoss
            tkc := (shortEntryPrice - shortStopLoss) * remainingUnitsAllocation
            pnl := pnl + tkc
        else
            pnl := pnl + (shortEntryPrice - tkCrossBuyPrice) * remainingUnitsAllocation
    else if shouldBuyOnStopLoss and remainingPercentAllocation > 0
        s := (shortEntryPrice - shortStopLoss) * remainingUnitsAllocation
        pnl := pnl + s
    else if shouldPreemptivelyExitShort and remainingPercentAllocation > 0
        realtime := (shortEntryPrice - close) * remainingUnitsAllocation
        if close > shortStopLoss
            pnl := pnl + ((shortEntryPrice - shortStopLoss) * remainingUnitsAllocation)
        else
            pnl := pnl + realtime
    else
        realtime := (shortEntryPrice - close) * remainingUnitsAllocation

var label maxCapitalLabel = na
var color maxCapitalLabelBgColor = na
var color maxCapitalLabelTextColor = na

if withinTestRange
     and (didLongPositionClose or didShortPositionClose)
    totalTrades := totalTrades + 1
    
    totalPnl := totalPnl + pnl
    if pnl > 0
        winners := winners + 1
        maxProfit := maxProfit < pnl ? pnl : maxProfit
    else
        loosers := loosers + 1
        maxLoss := maxLoss > pnl ? pnl : maxLoss
    
    cumulativeCapital := cumulativeCapital + tradeSize
    maxCapital := maxCapital < tradeSize ? tradeSize : maxCapital
    
    prevPnl := pnl
    prevPnlPercent := 100*pnl/tradeSize
    
    pnlLabel = label.new(x = bar_index,
                 y = (didLongPositionClose ? low : high),
                 style = (didLongPositionClose ? label.style_label_down : label.style_label_up),
                 color = (pnl > 0 ? pnlLabelProfitBgColor : pnlLabelLossBgColor),
                 textcolor = (pnl > 0 ? pnlLabelProfitColor : pnlLabelLossColor),
                 yloc = (didLongPositionClose ? yloc.abovebar : yloc.belowbar),
                 text = str.format("{0, number, currency}", pnl),
                 tooltip = str.format("Capital: {0, number, currency}\nUnits: {1}\nRoI: {2, number, #0.00%}", tradeSize, qty, pnl/tradeSize))
                 
    if tradeSize == maxCapital
        if maxCapitalLabel != na
            label.set_color(maxCapitalLabel, maxCapitalLabelBgColor)
            label.set_textcolor(maxCapitalLabel, maxCapitalLabelTextColor)
            
        maxCapitalLabelBgColor := (pnl > 0 ? pnlLabelProfitBgColor : pnlLabelLossBgColor)
        maxCapitalLabelTextColor := (pnl > 0 ? pnlLabelProfitColor : pnlLabelLossColor)
        maxCapitalLabel := pnlLabel
        label.set_color(pnlLabel, pnlLabelMaxCapitalColor)
        label.set_textcolor(pnlLabel, pnlLabelMaxCapitalTextColor)




//##################################################################
//##################################################################
//####                                                          ####
//####                Information Display Panels                ####
//####                                                          ####
//##################################################################
//##################################################################

// Display PnL summary
var table pnlTable = table.new(position.bottom_right, 8, 3, bgcolor = color.rgb(0, 0, 0, 30), frame_color = color.black)
if (barstate.islast and showPnl)
    table.cell(pnlTable, 0, 0, "Current", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 0, 1, str.format("{0, number, currency}", pnl), text_color = (pnl > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_halign = text.align_center)
    table.cell(pnlTable, 0, 2, (tradeSize > 0 ? str.format("{0, number, #0.00%}", pnl/tradeSize) : ""), text_color = (pnl > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_halign = text.align_center)
    table.cell(pnlTable, 1, 0, "Previous", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 1, 1, str.format("{0, number, currency}", prevPnl), text_color = (prevPnlPercent > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)), text_halign = text.align_center)
    table.cell(pnlTable, 1, 2, str.format("{0, number, #0.00}%", prevPnlPercent) , text_halign = text.align_center, text_color = (prevPnlPercent > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
    table.cell(pnlTable, 2, 0, "Winners", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 2, 1, str.tostring(winners), text_color = color.green, text_halign = text.align_center)
    table.cell(pnlTable, 2, 2, str.format("{0, number, currency}", maxProfit), text_halign = text.align_center, text_color = color.rgb(182, 209, 186))
    table.cell(pnlTable, 3, 0, "Loosers", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 3, 1, str.tostring(loosers), text_color = color.red, text_halign = text.align_center)
    table.cell(pnlTable, 3, 2, str.format("{0, number, currency}", maxLoss), text_halign = text.align_center, text_color = color.rgb(182, 153, 153))
    table.cell(pnlTable, 4, 0, "Total", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 4, 1, str.tostring(totalTrades), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 4, 2, str.format("{0, number, percent}", winners/totalTrades), text_halign = text.align_center, text_color = color.blue)
    table.cell(pnlTable, 5, 0, "Capital", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 5, 1, str.format("{0, number, currency}", maxCapital), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 5, 2, str.format("{0, number, currency}", cumulativeCapital/totalTrades), text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 6, 0, "Total PnL", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 6, 1, str.format("{0, number, currency}", totalPnl), text_halign = text.align_center, text_color =  (totalPnl > 0 ? color.green : color.red))
    table.cell(pnlTable, 6, 2, str.format("{0, number, #0.00%}", totalPnl/maxCapital), text_halign = text.align_center, text_color =   (totalPnl > 0 ? color.green : color.red))
    table.cell(pnlTable, 7, 0, "Total Bars", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 7, 1, str.tostring(totalCandles), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 7, 2, "-", text_halign = text.align_center, text_color = color.gray)

// Display trade information
if horizontalTradePlan
    var table tradeTable = table.new(position.top_right, 17, 4, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 1, 0, "Entry", text_color = color.white)
        table.cell(tradeTable, 2, 0, "TP", text_color = color.white)
        table.cell(tradeTable, 3, 0, "Exit 1", text_color = color.white)
        table.cell(tradeTable, 4, 0, "Exit 2", text_color = color.white)
        table.cell(tradeTable, 5, 0, "Exit 3", text_color = color.white)
        table.cell(tradeTable, 6, 0, "Exit 4", text_color = color.white)
        table.cell(tradeTable, 7, 0, "Exit 5", text_color = color.white)
        table.cell(tradeTable, 8, 0, "Exit 6", text_color = color.white)
        table.cell(tradeTable, 9, 0, "Exit 7", text_color = color.white)
        table.cell(tradeTable, 10, 0, "Exit 8", text_color = color.white)
        table.cell(tradeTable, 11, 0, "Exit 9", text_color = color.white)
        table.cell(tradeTable, 12, 0, "Exit 10", text_color = color.white)
        table.cell(tradeTable, 13, 0, "T. SL", text_color = color.white)
        table.cell(tradeTable, 14, 0, "SL/PnL", text_color = color.white)
        table.cell(tradeTable, 15, 0, "Qty/%", text_color = color.white)
        table.cell(tradeTable, 0, 1, "S/B", text_color = color.white)
        table.cell(tradeTable, 1, 1, str.tostring(ep, str.tostring(f_tickFormat())), text_color = color.blue)
        table.cell(tradeTable, 2, 1, str.tostring(inLongTrade ? sellLimitOrder : buyLimitOrder, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 3, 1, str.tostring(tp1, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 4, 1, str.tostring(tp2, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 5, 1, str.tostring(tp3, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 6, 1, str.tostring(tp4, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 7, 1, str.tostring(tp5, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 8, 1, str.tostring(tp6, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 9, 1, str.tostring(tp7, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 10, 1, str.tostring(tp8, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 11, 1, str.tostring(tp9, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 12, 1, str.tostring(tp10, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 13, 1, str.tostring(kp, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 14, 1, str.format("{0, number, currency}", sl), text_color = color.orange)
        table.cell(tradeTable, 15, 1, str.format("{0, number, #0.0000}", qty), text_color = color.gray)
        table.cell(tradeTable, 0, 2, "+/-", text_color = color.white)
        table.cell(tradeTable, 1, 2, str.format("{0,number,currency}", tradeSize), text_color = color.aqua)
        table.cell(tradeTable, 2, 2, str.tostring(lo, str.tostring(f_tickFormat())), text_color = (lo > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 3, 2, str.tostring(t1, str.tostring(f_tickFormat())), text_color = (t1 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 4, 2, str.tostring(t2, str.tostring(f_tickFormat())), text_color = (t2 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 5, 2, str.tostring(t3, str.tostring(f_tickFormat())), text_color = (t3 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 6, 2, str.tostring(t4, str.tostring(f_tickFormat())), text_color = (t4 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 7, 2, str.tostring(t5, str.tostring(f_tickFormat())), text_color = (t5 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 8, 2, str.tostring(t6, str.tostring(f_tickFormat())), text_color = (t6 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 9, 2, str.tostring(t7, str.tostring(f_tickFormat())), text_color = (t7 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 10, 2, str.tostring(t8, str.tostring(f_tickFormat())), text_color = (t8 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 11, 2, str.tostring(t9, str.tostring(f_tickFormat())), text_color = (t9 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 12, 2, str.tostring(t10, str.tostring(f_tickFormat())), text_color = (t10 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 13, 2, str.tostring(k, str.tostring(f_tickFormat())), text_color = (k > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 14, 2, str.format("{0, number, currency}", pnl+realtime), text_color = (pnl+realtime > 0 ? color.green : color.red))
        table.cell(tradeTable, 15, 2, str.format("{0, number, #0.00%}", (pnl+realtime)/tradeSize), text_color = (pnl+realtime > 0 ? color.green : color.red))
else
    var table tradeTable = table.new(position.top_right, 4, 17, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 0, 1, "Entry", text_color = color.white)
        table.cell(tradeTable, 0, 2, "TP", text_color = color.white)
        table.cell(tradeTable, 0, 3, "Exit 1", text_color = color.white)
        table.cell(tradeTable, 0, 4, "Exit 2", text_color = color.white)
        table.cell(tradeTable, 0, 5, "Exit 3", text_color = color.white)
        table.cell(tradeTable, 0, 6, "Exit 4", text_color = color.white)
        table.cell(tradeTable, 0, 7, "Exit 5", text_color = color.white)
        table.cell(tradeTable, 0, 8, "Exit 6", text_color = color.white)
        table.cell(tradeTable, 0, 9, "Exit 7", text_color = color.white)
        table.cell(tradeTable, 0, 10, "Exit 8", text_color = color.white)
        table.cell(tradeTable, 0, 11, "Exit 9", text_color = color.white)
        table.cell(tradeTable, 0, 12, "Exit 10", text_color = color.white)
        table.cell(tradeTable, 0, 13, "T. SL", text_color = color.white)
        table.cell(tradeTable, 0, 14, "SL/PnL", text_color = color.white)
        table.cell(tradeTable, 0, 15, "Qty/%", text_color = color.white)
        table.cell(tradeTable, 1, 0, "S/B", text_color = color.white)
        table.cell(tradeTable, 1, 1, str.tostring(ep, str.tostring(f_tickFormat())), text_color = color.blue)
        table.cell(tradeTable, 1, 2, str.tostring(inLongTrade ? sellLimitOrder : buyLimitOrder, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 3, str.tostring(tp1, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 4, str.tostring(tp2, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 5, str.tostring(tp3, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 6, str.tostring(tp4, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 7, str.tostring(tp5, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 8, str.tostring(tp6, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 9, str.tostring(tp7, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 10, str.tostring(tp8, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 11, str.tostring(tp9, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 12, str.tostring(tp10, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 13, str.tostring(kp, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 1, 14, str.format("{0, number, currency}", sl), text_color = color.orange)
        table.cell(tradeTable, 1, 15, str.format("{0, number, #0.0000}", qty), text_color = color.gray)
        table.cell(tradeTable, 2, 0, "+/-", text_color = color.white)
        table.cell(tradeTable, 2, 1, str.format("{0, number, currency}", tradeSize), text_color = color.aqua)
        table.cell(tradeTable, 2, 2, str.tostring(lo, str.tostring(f_tickFormat())), text_color = (lo > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 3, str.tostring(t1, str.tostring(f_tickFormat())), text_color = (t1 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 4, str.tostring(t2, str.tostring(f_tickFormat())), text_color = (t2 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 5, str.tostring(t3, str.tostring(f_tickFormat())), text_color = (t3 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 6, str.tostring(t4, str.tostring(f_tickFormat())), text_color = (t4 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 7, str.tostring(t5, str.tostring(f_tickFormat())), text_color = (t5 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 8, str.tostring(t6, str.tostring(f_tickFormat())), text_color = (t6 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 9, str.tostring(t7, str.tostring(f_tickFormat())), text_color = (t7 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 10, str.tostring(t8, str.tostring(f_tickFormat())), text_color = (t8 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 11, str.tostring(t9, str.tostring(f_tickFormat())), text_color = (t9 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 12, str.tostring(t10, str.tostring(f_tickFormat())), text_color = (t10 > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 13, str.tostring(k, str.tostring(f_tickFormat())), text_color = (k > 0 ? color.rgb(182, 209, 186) : color.rgb(182, 153, 153)))
        table.cell(tradeTable, 2, 14, str.format("{0, number, currency}", pnl+realtime), text_color = (pnl+realtime > 0 ? color.green : color.red))
        table.cell(tradeTable, 2, 15, str.format("{0, number, percent}", (pnl+realtime)/tradeSize), text_color = (pnl+realtime > 0 ? color.green : color.red))

// Display debug information
var table debugTable = table.new(position.bottom_center, 7, 3, bgcolor = color.silver, frame_width = 2, frame_color = color.gray)
if (barstate.islast and showL1DebugInfo)
    table.cell(debugTable, 1, 0, "Is Active?", text_color = color.black)
    table.cell(debugTable, 2, 0, "Should Scale Out?", text_color = color.black)
    table.cell(debugTable, 3, 0, "Need Exit?", text_color = color.black)
    table.cell(debugTable, 4, 0, "Should Enter?", text_color = color.black)
    table.cell(debugTable, 5, 0, "-", text_color = color.black)
    table.cell(debugTable, 6, 0, "Sentiment", text_color = color.black)
    table.cell(debugTable, 0, 1, "Long", text_color = color.black)
    table.cell(debugTable, 1, 1, str.tostring(inLongTrade), text_color = color.navy)
    //table.cell(debugTable, 2, 1, str.tostring(shouldScaleOut), text_color = color.navy)
    table.cell(debugTable, 3, 1, str.tostring(shouldSellOnKijun), text_color = color.navy)
    table.cell(debugTable, 4, 1, str.tostring(canPrepareForLong), text_color = color.navy)
    table.cell(debugTable, 5, 1, "-", text_color = color.navy)
    table.cell(debugTable, 6, 1, marketView, text_color = color.navy)
    table.cell(debugTable, 0, 2, "Short", text_color = color.black)
    table.cell(debugTable, 1, 2, str.tostring(inShortTrade), text_color = color.maroon)
    //table.cell(debugTable, 2, 2, str.tostring(shouldScaleOut), text_color = color.maroon)
    table.cell(debugTable, 3, 2, str.tostring(shouldBuyOnKijun), text_color = color.maroon)
    table.cell(debugTable, 4, 2, str.tostring(canPrepareForShort), text_color = color.maroon)
    table.cell(debugTable, 5, 2, "-", text_color = color.maroon)
    table.cell(debugTable, 6, 2, marketView, text_color = color.rgb(255, 153, 153))

// Display confluence information
var table confluenceTable = table.new(position.bottom_left, 3, 19, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
if (barstate.islast and showConfluenceInfo)
    table.cell(confluenceTable, 0, 0, "1. Future kumo is " + leadingKumoView + ".", text_color = (leadingKumoView == "bullish" ? color.green : (leadingKumoView == "bearish" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 1, "2. Price is " + priceWrtKumo + " kumo.", text_color = (priceWrtKumo == "above" ? color.green : (priceWrtKumo == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 2, "3. Price is " + priceWrtTenkan + " tenkan.", text_color = priceWrtTenkan == "above" ? color.green : (priceWrtTenkan == "below" ? color.red : color.white), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 3, "4. Tenkan is " + tenkanWrtKijun + " kijun.", text_color = (tenkanWrtKijun == "above" ? color.green : (tenkanWrtKijun == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 4, "5. TK cross was " + recentTkCross + " and " + tkCrossWrtKumo + " kumo.", text_color = (tkCrossWrtKumo == "above" ? (recentTkCross == "bullish" ? color.green : (recentTkCross == "bearish" ? color.rgb(255, 153, 153) : color.white)) : (tkCrossWrtKumo == "below" ? (recentTkCross == "bullish" ? color.rgb(182, 209, 186) : (recentTkCross == "bearish" ? color.red : color.white)) : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 5, "6. Chikou is " + chikouWrtPrice + " price.", text_color = (chikouWrtPrice == "above" ? color.green : (chikouWrtPrice == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 6, "7. Chikou is " + chikouWrtKumo + " kumo.", text_color = (chikouWrtKumo == "above" ? color.rgb(182, 209, 186) : (chikouWrtKumo == "below" ? color.rgb(255, 153, 153) : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 7, "8. SSB " + (ssbProximityToChikou < 0 ? " may not block Chikou" : " might block Chikou at " + str.tostring(ssbProximityToChikou) + "%") + " for " + (chikouWrtKumo == "above" ? "long" : "short"  )+ " trade.", text_color = ( ssbProximityToChikou < 0 and marketView == "bullish" ? color.green : ( ssbProximityToChikou < 0 and marketView == "bearish" ? color.red : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 8, "9. Chikou " + (isChikouSpanFree ? "clear from congestion." : " heading into " + str.tostring(congestionProximity) + " candles!"), text_color = (isChikouSpanFree ? (marketView == "bullish" ? color.green : (marketView == "bearish" ? color.red : color.gray)) : color.white), text_halign = text.align_left)
    
    if inShortTrade or inLongTrade
        table.cell(confluenceTable, 0, 9, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 10, "* Your trade is live! Respond to signals proactively.", text_color = color.aqua, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 11, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 12, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 13, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 14, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 15, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 16, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 17, "", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 18, "", text_color = color.yellow, text_halign = text.align_left)
    else
        table.cell(confluenceTable, 0, 9, "- Is current kumo thick?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 10, "- Is current kumo in flux?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 11, "- Is Senkou-Span-B flat & long?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 12, "- Is future kumo trending?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 13, "- Is kijun flat & long?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 14, "- Is 26 period high/low too far from the price?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 15, "- Does last 26 candle indicate kijun will trend?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 16, "- Are kumo shadows in the close proximity?", text_color = color.yellow, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 17, str.format("{0} {1}", (marketView == "bullish" ? "Go long upon" : (marketView == "bearish" ? "Go short upon" : "Hang on!")), (marketView == "bullish" ? str.tostring(longBreakoutPrice) + " breakout." : (marketView == "bearish" ? str.tostring(shortBreakoutPrice) + " breakout." : " Thange playbook is scanning for signals."))), text_color = color.aqua, text_halign = text.align_left)
        table.cell(confluenceTable, 0, 18, "Be ready with a limit-order at 9-period high/low.", text_color = color.aqua, text_halign = text.align_left)
