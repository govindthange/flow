// Â© 2021
// @ govindthange

//@version=5
indicator("Thange Cloud Playbook", shorttitle="Thange Signals", overlay=true)

// Standard constants
YES = 1.0
NO = 0.0


// Initialize an empty array to store trading parameters
var context = array.new_float(15)

f_set(_key, _val) => array.set(context, _key, _val)

f_get(_key) => array.get(context, _key)

f_getString(_key) => str.tostring(array.get(context, _key))

f_true(_key) => f_get(_key) == YES

f_print(_text) =>
    // Create label on the first bar.
    var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.white, size.small, text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(_label, bar_index, ta.highest(10)[1])
    label.set_text(_label, _text)

// Create string format template to restrict SL precision to ticks.
f_tickFormat() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")

// Collect inputs

riskToRewardRatio = input.int(1, minval=1, title="Risk:Reward")
stopLossActivationFactor = input.float (0.25, title="S.L. Activation in terms of R/R factor")

atrLength = input.int(30, minval=1, title="ATR Length")
atrStopMultiplier = input.float(1.0, minval=0.1, title="ATR x ?")

//###############################################
//###############################################
//####                                       ####
//####    Ichimoku Cloud - The Core Logic    ####
//####                                       ####
//###############################################
//#####33########################################

tenkanSenPeriod = input.int(9, minval=1, title="Tenkan Sen Length")
kijunSenPeriod = input.int(26, minval=1, title="Kijun Sen Length")
senkouSpanBPeriod = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Displacement")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

tenkanSen = donchian(tenkanSenPeriod)
kijunSen = donchian(kijunSenPeriod)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = donchian(senkouSpanBPeriod)

// Calculate stop-loss using ATR
r = ta.atr(atrLength) * atrStopMultiplier
entryPrice = close
longEntryStop = kijunSen - r
shortEntryStop = kijunSen + r


//##########################################################################
//##########################################################################
//####                                                                  ####
//####    Assess for high probability setup on the trading timeframe    ####
//####                                                                  ####
//##########################################################################
//##########################################################################

// How is current kumo?
float temp = senkouSpanA[displacement-1] - senkouSpanB[displacement-1]
string kumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

// How is future kumo?
temp := senkouSpanA - senkouSpanB
string leadingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

// Where is price w.r.t kumo?
string priceWrtKumo = "within"
if (kumoView == "bullish" and close > senkouSpanA[displacement-1])
     or (kumoView == "bearish" and close > senkouSpanB[displacement-1])
    priceWrtKumo := "above"
else if (kumoView == "bullish" and close < senkouSpanB[displacement-1])
     or (kumoView == "bearish" and close < senkouSpanA[displacement-1])
    priceWrtKumo := "below"

// Where is price w.r.t tenkan?
string priceWrtTenkan = close > tenkanSen ? "above" : (close < tenkanSen ? "below" : "at")

// Where tenkan w.r.t kijun?
string tenkanWrtKijun = tenkanSen > kijunSen ? "above" : ( tenkanSen < kijunSen ? "below" : "at")

// Where is TK cross w.r.t kumo? <--- This is not a filter. Ignore!
var string recentTkCross = "unknown"

bool didNewTkCrossOccur = false
if (tenkanSen[1] <= kijunSen[1] and tenkanSen > kijunSen)
    recentTkCross := "bullish"
    didNewTkCrossOccur := true
else if (tenkanSen[1] >= kijunSen[1] and tenkanSen < kijunSen)
    recentTkCross := "bearish"
    didNewTkCrossOccur := true

var string tkCrossWrtKumo = "within"
if (didNewTkCrossOccur
     and kumoView == "bullish"
     and kijunSen > senkouSpanA[displacement-1])
     or (kumoView == "bearish" and kijunSen > senkouSpanB[displacement-1])
    tkCrossWrtKumo := "above"
else if (didNewTkCrossOccur
     and ((kumoView == "bullish" and kijunSen < senkouSpanB[displacement-1])
     or (kumoView == "bearish" and kijunSen < senkouSpanA[displacement-1])))
    tkCrossWrtKumo := "below"

//f_print("ten1: " + str.tostring(tenkanSen[1]) + ", kin1: " + str.tostring(kijunSen[1]) + ", t>k " + str.tostring(tenkanSen > kijunSen) + ", recentTkCross: " + recentTkCross + "\n\n")
//f_print("ten: " + str.tostring(tenkanSen) + ", kin: " + str.tostring(kijunSen) + ", t<k " + str.tostring(tenkanSen < kijunSen) + ", recentTkCross: " + recentTkCross + "\n")
//f_print("senkouSpanA[displacement-1]: " + str.tostring(senkouSpanA[displacement-1]) + ", senkouSpanB[displacement-1]: " + str.tostring(senkouSpanB[displacement-1]) + ", > " + str.tostring(kumoView))

// Where is chikou w.r.t price?
string chikouWrtPrice = "at"
if (close > high[displacement-1])
    chikouWrtPrice := "above"
else if (close < low[displacement-1])
    chikouWrtPrice := "below"

//f_print(str.tostring(displacement-1) + " bar price" + str.tostring(close[displacement-1]))

// Where is chikou w.r.t kumo?
temp := senkouSpanA[2*displacement-1] - senkouSpanB[2*displacement-1]
string laggingKumoView = temp > 0 ? "bullish" : (temp < 0 ? "bearish" : "neutral")

string chikouWrtKumo = "within"
if (laggingKumoView == "bullish" and close > senkouSpanA[2*displacement-1])
     or (kumoView == "bearish" and close > senkouSpanB[2*displacement-1])
    chikouWrtKumo := "above"
else if (laggingKumoView == "bullish" and close < senkouSpanB[2*displacement-1])
     or (laggingKumoView == "bearish" and close < senkouSpanA[2*displacement-1])
    chikouWrtKumo := "below"

// Where is chikou w.r.t a flat Senkou-Span-B ahead?

// Is chikou free from congestion ahead? Is it heading into price?
congestionProximity = input.int(10, minval=1, title="How many bars far should chikou be?")
congestionTolerance = input.float(0, minval=0.0, title="Congestion Tolerance")

highestForChikou = (1-congestionTolerance/100) * ta.highest(high[displacement-congestionProximity], congestionProximity)
lowestForChikou = (1-congestionTolerance/100) * ta.lowest(low[displacement-congestionProximity], congestionProximity)

isChikouSpanFree = chikouWrtPrice == "above" ? (close > highestForChikou) : chikouWrtPrice == "below" ? (close < lowestForChikou) : false
//f_print("isChikouSpanFree: " + str.tostring(isChikouSpanFree) + " in the next " + str.tostring(congestionProximity) + " bars, highest: " + str.tostring(highestForChikou) + ", lowest: " + str.tostring(lowestForChikou) + "\n")


// Declare constants to access global variables
IDX_PriceLevelToBeginTrailingStopLoss = 0
IDX_ShouldExitOnStopLoss = 1
IDX_UseKijunAsStopLoss = 2

f_reset() =>
    f_set(IDX_PriceLevelToBeginTrailingStopLoss, -1)
    f_set(IDX_ShouldExitOnStopLoss, NO)
    f_set(IDX_UseKijunAsStopLoss, NO)
    
// Establish market view through confluence
string marketView = "conslidating"
if priceWrtKumo == "above"
     and priceWrtTenkan == "above"
     and tenkanWrtKijun == "above"
     and leadingKumoView == "bullish"
     and chikouWrtPrice == "above"
     and isChikouSpanFree
    marketView := "bullish"
else if priceWrtKumo == "below"
     and priceWrtTenkan == "below"
     and tenkanWrtKijun == "below"
     and leadingKumoView == "bearish"
     and chikouWrtPrice == "below"
     and isChikouSpanFree
    marketView := "bearish"

lowestSSB = ta.lowest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)
highestSSB = ta.highest(senkouSpanB[2*displacement - 1 - congestionProximity], congestionProximity)

float ssbProximityToChikou = -1.0
if (marketView == "bullish" and chikouWrtKumo == "below")
    ssbProximityToChikou := (lowestSSB - close)*100/close
    //f_print(">> overhead resistance at " + str.tostring(ssbProximityToChikou))
else if (marketView == "bearish" and chikouWrtKumo == "above")
    ssbProximityToChikou := (close - lowestSSB)*100/close
    //f_print(">> underlying support at " + str.tostring(ssbProximityToChikou) + "\n")

// Asssess exit scenarios

var inLongTrade = false
var inShortTrade = false

// Where is price w.r.t kijun?
string priceWrtKijun = "unknown"
if inLongTrade // for exiting in a long position
    priceWrtKijun := low < kijunSen ? "below" : (low > kijunSen ? "above" : "at")
else if inShortTrade // for exiting in a short position
    priceWrtKijun := high < kijunSen ? "below" : (high > kijunSen ? "above" : "at")
else // for confluence to enter position
    priceWrtKijun := close < kijunSen ? "below" : (close > kijunSen ? "above" : "at")

//f_print("low: " + str.tostring(low) + ", kijun: " + str.tostring(kijunSen) + ", = " + priceWrtKijun)


bool didLongPositionClose = false
bool didShortPositionClose = false

//###############################################################
//###############################################################
//####                                                       ####
//####              Manage LONG Position                     ####
//####                                                       ####
//###############################################################
//###############################################################

var canPrepareForLong = false
var shouldSellOnTenkan = false
var shouldSellOnKijun = false
var shouldSellOnLimitOrder = false
var didSellOnLimitOrder = false

var longEntryPrice = 0.0
var longStopLoss = 0.0
var tenkanSellPrice1 = 0.0
var tenkanSellPrice2 = 0.0
var tenkanSellPrice3 = 0.0
var tenkanSellPrice4 = 0.0
var tenkanSellPrice5 = 0.0
var tenkanSellPrice6 = 0.0
var tenkanSellPrice7 = 0.0
var tenkanSellPrice8 = 0.0
var tenkanSellPrice9 = 0.0
var tenkanSellPrice10 = 0.0
var kijunSellPrice = 0.0
var sellLimitOrder = 0.0

if not inLongTrade
    shouldSellOnKijun := false
    //shouldScaleOut := true
    shouldSellOnTenkan := false
    shouldSellOnLimitOrder := false
    didSellOnLimitOrder := false

    longEntryPrice := 0.0
    longStopLoss := 0.0
    tenkanSellPrice1 := 0.0
    tenkanSellPrice2 := 0.0
    tenkanSellPrice3 := 0.0
    tenkanSellPrice4 := 0.0
    tenkanSellPrice5 := 0.0
    tenkanSellPrice6 := 0.0
    tenkanSellPrice7 := 0.0
    tenkanSellPrice8 := 0.0
    tenkanSellPrice9 := 0.0
    tenkanSellPrice10 := 0.0
    kijunSellPrice := 0.0
    sellLimitOrder := 0.0

if (inLongTrade and high > f_get(IDX_PriceLevelToBeginTrailingStopLoss))
    f_set(IDX_UseKijunAsStopLoss, YES)

if (inLongTrade and low <= longStopLoss)
    f_set(IDX_ShouldExitOnStopLoss, YES)

if (inLongTrade and priceWrtKijun == "below" and f_true(IDX_UseKijunAsStopLoss))
    shouldSellOnKijun := true
    //shouldScaleOut := true
    kijunSellPrice := kijunSen

if (inLongTrade and marketView == "bearish")
    inLongTrade := false
    
//f_print("[L1] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldSellOnKijun) + ", bullishConf? = " + str.tostring(hasBullishConfluence) + "\n")

canPrepareForLong := not inLongTrade and marketView == "bullish"
if canPrepareForLong
    inLongTrade := true
    shouldSellOnKijun := false
    longEntryPrice := close
    longStopLoss := longEntryStop
    sellLimitOrder := longEntryPrice + (longEntryPrice - longEntryStop) * riskToRewardRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, longEntryPrice + (longEntryPrice - longEntryStop) * stopLossActivationFactor)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=1, color=color.gray, style=line.style_dotted)
    //line.new(bar_index+ta.highestbars(high, tenkanSenPeriod), ta.highest(high, tenkanSenPeriod), bar_index+3, ta.highest(high, tenkanSenPeriod), width=1, color=color.green, style=line.style_dotted)
    line.new(bar_index, longStopLoss, bar_index+3, longStopLoss, width=1, color=color.green, style=line.style_dotted)

if (inLongTrade and not shouldSellOnKijun and close < tenkanSen and close[1] >= tenkanSen[1])
    shouldSellOnTenkan := true
    if (tenkanSellPrice1 == 0.0)
        tenkanSellPrice1 := close
    else if (tenkanSellPrice2 == 0.0)
        tenkanSellPrice2 := close
    else if (tenkanSellPrice3 == 0.0)
        tenkanSellPrice3 := close
    else if (tenkanSellPrice4 == 0.0)
        tenkanSellPrice4 := close
    else if (tenkanSellPrice5 == 0.0)
        tenkanSellPrice5 := close
    else if (tenkanSellPrice6 == 0.0)
        tenkanSellPrice6 := close
    else if (tenkanSellPrice7 == 0.0)
        tenkanSellPrice7 := close
    else if (tenkanSellPrice8 == 0.0)
        tenkanSellPrice8 := close
    else if (tenkanSellPrice9 == 0.0)
        tenkanSellPrice9 := close
    else if (tenkanSellPrice10 == 0.0)
        tenkanSellPrice10 := close
else
    shouldSellOnTenkan := false
    
if (inLongTrade and not didSellOnLimitOrder and close >= sellLimitOrder)
    shouldSellOnLimitOrder := true

//f_print("[L2] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldSellOnKijun) + ", canPrepareForLong: " + str.tostring(canPrepareForLong) + "\n\n")

// Plot LONG signals based on confluence
plotshape(canPrepareForLong, title= "Long Entry", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="", size=size.small)
if canPrepareForLong
    canPrepareForLong := false // reset flag

plotshape(shouldSellOnTenkan, title= "Tenkan Long Exit", location=location.abovebar, color=color.aqua, transp=0, style=shape.diamond, text="", size=size.tiny)

plotshape(shouldSellOnKijun, title= "Kijun Long Exit", location=location.abovebar, color=color.green, transp=0, style=shape.xcross, text="", size=size.small)

plotshape(inLongTrade and f_true(IDX_ShouldExitOnStopLoss), title= "Stop Loss Long Exit", location=location.belowbar, color=color.rgb(182, 209, 186), transp=0, style=shape.xcross, text="", size=size.small)

plotshape(shouldSellOnLimitOrder, title= "Fixed Long Exit", location=location.abovebar, color=color.aqua, transp=0, style=shape.square, text="", size=size.tiny)
if shouldSellOnLimitOrder
    didSellOnLimitOrder := true
    shouldSellOnLimitOrder := false

// Draw labels to enter or trail a stop-loss order based on confluence

if (inLongTrade and (shouldSellOnKijun or f_true(IDX_ShouldExitOnStopLoss)))
    inLongTrade := false
    f_reset()
    didLongPositionClose := true


//###############################################################
//###############################################################
//####                                                       ####
//####              Manage SHORT Position                    ####
//####                                                       ####
//###############################################################
//###############################################################

var canPrepareForShort = false
var shouldBuyOnTenkan = false
var shouldBuyOnKijun = false
var shouldBuyOnLimitOrder = false
var didBuyOnLimitOrder = false

var shortEntryPrice = 0.0
var shortStopLoss = 0.0
var tenkanBuyPrice1 = 0.0
var tenkanBuyPrice2 = 0.0
var tenkanBuyPrice3 = 0.0
var tenkanBuyPrice4 = 0.0
var tenkanBuyPrice5 = 0.0
var tenkanBuyPrice6 = 0.0
var tenkanBuyPrice7 = 0.0
var tenkanBuyPrice8 = 0.0
var tenkanBuyPrice9 = 0.0
var tenkanBuyPrice10 = 0.0
var kijunBuyPrice = 0.0
var buyLimitOrder = 0.0

if not inShortTrade
    shouldBuyOnKijun := false
    //shouldScaleOut := true
    shouldBuyOnLimitOrder := false
    didBuyOnLimitOrder := false
    shortEntryPrice := 0.0
    shortStopLoss := 0.0
    tenkanBuyPrice1 := 0.0
    tenkanBuyPrice2 := 0.0
    tenkanBuyPrice3 := 0.0
    tenkanBuyPrice4 := 0.0
    tenkanBuyPrice5 := 0.0
    tenkanBuyPrice6 := 0.0
    tenkanBuyPrice7 := 0.0
    tenkanBuyPrice8 := 0.0
    tenkanBuyPrice9 := 0.0
    tenkanBuyPrice10 := 0.0
    kijunBuyPrice := 0.0
    buyLimitOrder := 0.0

if (inShortTrade and low < f_get(IDX_PriceLevelToBeginTrailingStopLoss))
    f_set(IDX_UseKijunAsStopLoss, YES)

if (inShortTrade and high >= shortStopLoss)
    f_set(IDX_ShouldExitOnStopLoss, YES)

//f_print("low: " + str.tostring(low) + ", shortSL: " + str.tostring(shortStopLoss) +", finalSL: " + f_getString(IDX_PriceLevelToBeginTrailingStopLoss) + ", useKijonAsSL: " + f_getString(IDX_UseKijunAsStopLoss)+ ", shouldExitOnSL: " + f_getString(IDX_ShouldExitOnStopLoss))

if (inShortTrade and priceWrtKijun == "above" and f_true(IDX_UseKijunAsStopLoss))
    shouldBuyOnKijun := true
    //shouldScaleOut := true
    kijunBuyPrice := kijunSen

if (inShortTrade and marketView == "bullish")
    inShortTrade := false

//f_print("[S1] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldBuyOnKijun) + ", bearishConf? = " + str.tostring(hasBearishConfluence) + ", isPriceAboveKijunsen? = " + str.tostring(isPriceAboveKijunSen) + "\n\n\n")

canPrepareForShort :=  not inShortTrade and marketView == "bearish"
if canPrepareForShort
    inShortTrade := true
    shouldBuyOnKijun := false
    shortEntryPrice := close
    shortStopLoss := shortEntryStop
    buyLimitOrder := shortEntryPrice - (shortEntryStop - shortEntryPrice) * riskToRewardRatio
    array.set(context, IDX_PriceLevelToBeginTrailingStopLoss, shortEntryPrice + (shortEntryPrice - shortStopLoss) * stopLossActivationFactor)
    line.new(bar_index, f_get(IDX_PriceLevelToBeginTrailingStopLoss), bar_index+10, f_get(IDX_PriceLevelToBeginTrailingStopLoss), width=1, color=color.gray, style=line.style_dotted)
    //line.new(bar_index+ta.lowestbars(low, tenkanSenPeriod)-2, ta.lowest(low, tenkanSenPeriod), bar_index+3, ta.lowest(low, tenkanSenPeriod), width=1, color=color.red, style=line.style_dotted)
    line.new(bar_index, shortStopLoss, bar_index+3, shortStopLoss, width=1, color=color.red, style=line.style_dotted)

if (inShortTrade and not shouldBuyOnKijun and close > tenkanSen and close[1] <= tenkanSen[1])
    shouldBuyOnTenkan := true
    if (tenkanBuyPrice1 == 0.0)
        tenkanBuyPrice1 := close
    else if (tenkanBuyPrice2 == 0.0)
        tenkanBuyPrice2 := close
    else if (tenkanBuyPrice3 == 0.0)
        tenkanBuyPrice3 := close
    else if (tenkanBuyPrice4 == 0.0)
        tenkanBuyPrice4 := close
    else if (tenkanBuyPrice5 == 0.0)
        tenkanBuyPrice5 := close
    else if (tenkanBuyPrice6 == 0.0)
        tenkanBuyPrice6 := close
    else if (tenkanBuyPrice7 == 0.0)
        tenkanBuyPrice7 := close
    else if (tenkanBuyPrice8 == 0.0)
        tenkanBuyPrice8 := close
    else if (tenkanBuyPrice9 == 0.0)
        tenkanBuyPrice9 := close
    else if (tenkanBuyPrice10 == 0.0)
        tenkanBuyPrice10 := close
else
    shouldBuyOnTenkan := false
    
if (inShortTrade and not didBuyOnLimitOrder and close <= buyLimitOrder)
    shouldBuyOnLimitOrder := true

//f_print("[S2] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldBuyOnKijun) + ", canPrepareForShort: " + str.tostring(canPrepareForShort) + ", isPriceAboveKijunsen? = " + str.tostring(isPriceAboveKijunSen) + "\n\n\n\n")

// Plot SHORT signals based on confluence
plotshape(canPrepareForShort,  title= "Short Entry", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="", size=size.small)
if canPrepareForShort
    canPrepareForShort := false // reset flag

plotshape(shouldBuyOnTenkan, title= "Tenkan Short Exit", location=location.belowbar, color=color.orange, transp=0, style=shape.diamond, text="", size=size.tiny)

plotshape(shouldBuyOnKijun, title= "Kijun Short Exit", location=location.belowbar, color=color.red, transp=0, style=shape.xcross, text="", size=size.small)

plotshape(inShortTrade and f_true(IDX_ShouldExitOnStopLoss), title= "Stop Loss Short Exit", location=location.abovebar, color=color.rgb(255, 153, 153), transp=0, style=shape.xcross, text="", size=size.small)

plotshape(shouldBuyOnLimitOrder, title= "Fixed Short Exit", location=location.belowbar, color=color.orange, transp=0, style=shape.square, text="", size=size.tiny)

if shouldBuyOnLimitOrder
    didBuyOnLimitOrder := true
    shouldBuyOnLimitOrder := false

if (inShortTrade and (shouldBuyOnKijun or f_true(IDX_ShouldExitOnStopLoss)))
    inShortTrade := false
    f_reset()
    didShortPositionClose := true


//###############################################################
//###############################################################
//####                                                       ####
//####                     Profit & Loss                     ####
//####                                                       ####
//###############################################################
//###############################################################

var int totalCandles = 0

totalCandles := totalCandles + 1

float accountSize = input.float(1000, title="Account Size")
float maxRisk = input.float(25, title="Max risk per position") / 100
float exitPercent = input.float(25, title="Scale out percent") / 100
float maxRiskPerPosition = accountSize * maxRisk
float qty = 0.0, tradeSize = 0.0, pnl = 0.0, remainingUnitsAllocation = 0.0, remainingPercentAllocation = 1.0

var int winners = 0
var int loosers = 0
var int totalTrades = 0
var float cumulativeCapital = 0.0
var float maxCapital = 0.0
var float totalPnl = 0.0
var float prevPnl = 0.0
var float prevPnlPercent = 0.0
var float maxProfit = 0.0
var float maxLoss = 0.0

float ep = 0.0, sl = 0.0, tp1 = 0.0, tp2 = 0.0, tp3 = 0.0, tp4 = 0.0, tp5 = 0.0, lim = 0.0, kp = 0.0

// Temporary variables for debugging
float t1 = 0.0, t2 = 0.0, t3 = 0.0, t4 = 0.0, t5 = 0.0, t6 =0.0, t7 = 0.0, t8 = 0.0, t9 = 0.0, t10 = 0.0, k = 0.0, lo = 0.0, dt1 = 0.0, dt2 = 0.0, dt3 = 0.0, dt4 = 0.0, dt5 = 0.0, dt6 = 0.0, dt7 = 0.0, dt8 = 0.0, dt9 = 0.0, dt10 = 0.0, dk = 0.0, dlo = 0.0
if not inLongTrade and not inShortTrade
    ep :=0, sl :=0, tp1 :=0, tp2 :=0, tp3 :=0, tp4 :=0, tp5 :=0, lo :=0, kp :=0
    t1 := 0, t2 := 0, t3 := 0, t4 := 0, t5 := 0, t6 :=0, t7 := 0, t8 := 0, t9 := 0, t10 := 0, k := 0, lo := 0, dt1 := 0, dt2 := 0, dt3 := 0, dt4 := 0, dt5 := 0, dt6 :=0, dt7 := 0, dt8 := 0, dt9 := 0, dt10 := 0, dk := 0, dlo := 0

if inLongTrade or didLongPositionClose
    qty := maxRiskPerPosition / (longEntryPrice - longStopLoss)
    tradeSize := qty * longEntryPrice
    remainingUnitsAllocation := qty
    
    ep := longEntryPrice, sl := longStopLoss, tp1 := tenkanSellPrice1, tp2 := tenkanSellPrice2, tp3 := tenkanSellPrice3, tp4 := tenkanSellPrice4, tp5 := tenkanSellPrice5, lim := sellLimitOrder, kp := kijunSellPrice
    
    if sellLimitOrder > 0 and didSellOnLimitOrder and remainingPercentAllocation > 0
        dlo := (sellLimitOrder - longEntryPrice) 
        lo := dlo * exitPercent * qty
        pnl := pnl + lo
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice1 > 0 and remainingPercentAllocation > 0
        dt1 := (tenkanSellPrice1 - longEntryPrice)
        t1 := dt1 * exitPercent * qty
        pnl := pnl + t1
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice2 > 0 and remainingPercentAllocation > 0
        dt2 := (tenkanSellPrice2 - longEntryPrice)
        t2 := dt2 * exitPercent * qty
        pnl := pnl + t2
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice3 > 0 and remainingPercentAllocation > 0
        dt3 := (tenkanSellPrice3 - longEntryPrice)
        t3 := dt3 * exitPercent * qty
        pnl := pnl + t3
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice4 > 0 and remainingPercentAllocation > 0
        dt4 := (tenkanSellPrice4 - longEntryPrice)
        t4 := dt4 * exitPercent * qty
        pnl := pnl + t4
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice5 > 0 and remainingPercentAllocation > 0
        dt5 := (tenkanSellPrice5 - longEntryPrice)
        t5 := dt5 * exitPercent * qty
        pnl := pnl + t5
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice6 > 0 and remainingPercentAllocation > 0
        dt6 := (tenkanSellPrice6 - longEntryPrice)
        t6 := dt6 * exitPercent * qty
        pnl := pnl + t6
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice7 > 0 and remainingPercentAllocation > 0
        dt7 := (tenkanSellPrice7 - longEntryPrice)
        t7 := dt7 * exitPercent * qty
        pnl := pnl + t7
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice8 > 0 and remainingPercentAllocation > 0
        dt8 := (tenkanSellPrice8 - longEntryPrice)
        t8 := dt8 * exitPercent * qty
        pnl := pnl + t8
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice9 > 0 and remainingPercentAllocation > 0
        dt9 := (tenkanSellPrice9 - longEntryPrice)
        t9 := dt9 * exitPercent * qty
        pnl := pnl + t9
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanSellPrice10 > 0 and remainingPercentAllocation > 0
        dt10 := (tenkanSellPrice10 - longEntryPrice)
        t10 := dt10 * exitPercent * qty
        pnl := pnl + t10
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if kijunSellPrice > 0 and remainingPercentAllocation > 0
        if kijunSellPrice < longStopLoss
            k := (longStopLoss - longEntryPrice) * remainingUnitsAllocation
            pnl := pnl + k
        else
            pnl := pnl + (kijunSellPrice - longEntryPrice) * remainingUnitsAllocation

if inShortTrade or didShortPositionClose
    qty := maxRiskPerPosition / (shortStopLoss - shortEntryPrice)
    tradeSize := qty * shortEntryPrice
    remainingUnitsAllocation := qty
    
    ep := shortEntryPrice, sl := shortStopLoss, tp1 := tenkanBuyPrice1, tp2 := tenkanBuyPrice2, tp3 := tenkanBuyPrice3, tp4 := tenkanBuyPrice4, tp5 := tenkanBuyPrice5, lim := buyLimitOrder, kp := kijunBuyPrice
    
    if buyLimitOrder > 0 and didBuyOnLimitOrder and remainingPercentAllocation > 0
        dlo := (shortEntryPrice - buyLimitOrder) 
        lo := dlo * exitPercent * qty
        pnl := pnl + lo
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice1 > 0 and remainingPercentAllocation > 0
        dt1 := (shortEntryPrice - tenkanBuyPrice1)
        t1 := dt1 * exitPercent * qty
        pnl := pnl + t1
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice2 > 0 and remainingPercentAllocation > 0
        dt2 := (shortEntryPrice - tenkanBuyPrice2)
        t2 := dt2 * exitPercent * qty
        pnl := pnl + t2
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice3 > 0 and remainingPercentAllocation > 0
        dt3 := (shortEntryPrice - tenkanBuyPrice3)
        t3 := dt3 * exitPercent * qty
        pnl := pnl + t3
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice4 > 0 and remainingPercentAllocation > 0
        dt4 := (shortEntryPrice - tenkanBuyPrice4)
        t4 := dt4 * exitPercent * qty
        pnl := pnl + t4
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice5 > 0 and remainingPercentAllocation > 0
        dt5 := (shortEntryPrice - tenkanBuyPrice5)
        t5 := dt5 * exitPercent * qty
        pnl := pnl + t5
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice6 > 0 and remainingPercentAllocation > 0
        dt6 := (tenkanBuyPrice6 - longEntryPrice)
        t6 := dt6 * exitPercent * qty
        pnl := pnl + t6
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice7 > 0 and remainingPercentAllocation > 0
        dt7 := (tenkanBuyPrice7 - longEntryPrice)
        t7 := dt7 * exitPercent * qty
        pnl := pnl + t7
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice8 > 0 and remainingPercentAllocation > 0
        dt8 := (tenkanBuyPrice8 - longEntryPrice)
        t8 := dt8 * exitPercent * qty
        pnl := pnl + t8
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice9 > 0 and remainingPercentAllocation > 0
        dt9 := (tenkanBuyPrice9 - longEntryPrice)
        t9 := dt9 * exitPercent * qty
        pnl := pnl + t9
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if tenkanBuyPrice10 > 0 and remainingPercentAllocation > 0
        dt10 := (tenkanBuyPrice10 - longEntryPrice)
        t10 := dt10 * exitPercent * qty
        pnl := pnl + t10
        remainingUnitsAllocation := remainingUnitsAllocation - (qty * exitPercent)
        remainingPercentAllocation := remainingPercentAllocation - exitPercent
    if kijunBuyPrice > 0 and remainingPercentAllocation > 0
        if kijunBuyPrice > shortStopLoss
            k := (shortEntryPrice - shortStopLoss) * remainingUnitsAllocation
            pnl := pnl + k
        else
            pnl := pnl + (shortEntryPrice - kijunBuyPrice) * remainingUnitsAllocation    

if didLongPositionClose or didShortPositionClose
    totalTrades := totalTrades + 1
    
    totalPnl := totalPnl + pnl
    if pnl > 0
        winners := winners + 1
        maxProfit := maxProfit < pnl ? pnl : maxProfit
    else
        loosers := loosers + 1
        maxLoss := maxLoss > pnl ? pnl : maxLoss
    
    cumulativeCapital := cumulativeCapital + tradeSize
    maxCapital := maxCapital < tradeSize ? tradeSize : maxCapital
    
    prevPnl := pnl
    prevPnlPercent := 100*pnl/tradeSize
    

//##################################################################
//##################################################################
//####                                                          ####
//####                Information Display Panels                ####
//####                                                          ####
//##################################################################
//##################################################################

// Display confluence information
showPnl = input.bool(false, title="Profit & Loss")
var table pnlTable = table.new(position.bottom_center, 8, 3, bgcolor = color.rgb(0, 0, 0, 30), frame_color = color.black)
if (barstate.islast and showPnl)
    table.cell(pnlTable, 0, 0, "Current", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 0, 1, "$" + str.tostring(pnl, str.tostring(f_tickFormat())), text_color = color.silver, text_halign = text.align_center)
    table.cell(pnlTable, 0, 2, (tradeSize > 0 ? str.tostring(100*pnl/tradeSize, str.tostring(f_tickFormat())) + "%" : ""), text_color = color.gray, text_halign = text.align_center)
    table.cell(pnlTable, 1, 0, "Previous", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 1, 1, "$" + str.tostring(prevPnl, str.tostring(f_tickFormat())), text_color = color.silver, text_halign = text.align_center)
    table.cell(pnlTable, 1, 2, str.tostring(prevPnlPercent, str.tostring(f_tickFormat())) + "%", text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 2, 0, "Winners", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 2, 1, str.tostring(winners), text_color = color.green, text_halign = text.align_center)
    table.cell(pnlTable, 2, 2, str.tostring(maxProfit, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 3, 0, "Loosers", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 3, 1, str.tostring(loosers), text_color = color.red, text_halign = text.align_center)
    table.cell(pnlTable, 3, 2, str.tostring(maxLoss, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 4, 0, "Total", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 4, 1, str.tostring(totalTrades), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 4, 2, "-", text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 5, 0, "Capital", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 5, 1, str.tostring(maxCapital, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 5, 2, str.tostring(cumulativeCapital/totalTrades, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 6, 0, "Total PnL", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 6, 1, str.tostring(totalPnl, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 6, 2, str.tostring(totalPnl/totalTrades, str.tostring(f_tickFormat())), text_halign = text.align_center, text_color = color.gray)
    table.cell(pnlTable, 7, 0, "Total Bars", text_halign = text.align_center, text_color = color.white)
    table.cell(pnlTable, 7, 1, str.tostring(totalCandles), text_halign = text.align_center, text_color = color.silver)
    table.cell(pnlTable, 7, 2, "-", text_halign = text.align_center, text_color = color.gray)
    
    
// Display trade information
showTradePlan = input.bool(false, title="Trade Plan")
horizontalTradePlan = input.bool(false, title="Show Trade Plan Horizontally")

if horizontalTradePlan
    var table tradeTable = table.new(position.top_right, 12, 4, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 1, 0, "Entry", text_color = color.white)
        table.cell(tradeTable, 2, 0, "SL", text_color = color.white)
        table.cell(tradeTable, 3, 0, "Exit 1", text_color = color.white)
        table.cell(tradeTable, 4, 0, "Exit 2", text_color = color.white)
        table.cell(tradeTable, 5, 0, "Exit 3", text_color = color.white)
        table.cell(tradeTable, 6, 0, "Exit 4", text_color = color.white)
        table.cell(tradeTable, 7, 0, "Exit 5", text_color = color.white)
        table.cell(tradeTable, 8, 0, "T. SL", text_color = color.white)
        table.cell(tradeTable, 9, 0, "TP", text_color = color.white)
        table.cell(tradeTable, 10, 0, "Qty/Cap", text_color = color.white)
        table.cell(tradeTable, 11, 0, "ATR", text_color = color.white)
        table.cell(tradeTable, 0, 1, "S/B", text_color = color.white)
        table.cell(tradeTable, 1, 1, str.tostring(ep, str.tostring(f_tickFormat())), text_color = color.green)
        table.cell(tradeTable, 2, 1, str.tostring(sl, str.tostring(f_tickFormat())), text_color = color.red)
        table.cell(tradeTable, 3, 1, str.tostring(tp1, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 4, 1, str.tostring(tp2, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 5, 1, str.tostring(tp3, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 6, 1, str.tostring(tp4, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 7, 1, str.tostring(tp5, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 8, 1, str.tostring(kp, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 9, 1, (didSellOnLimitOrder ? str.tostring(lim, str.tostring(f_tickFormat())) : "0.0"), text_color = color.aqua)
        table.cell(tradeTable, 10, 1, str.tostring(qty), text_color = color.gray)
        table.cell(tradeTable, 11, 1, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 0, 2, "P&L", text_color = color.white)
        table.cell(tradeTable, 1, 2, str.tostring(pnl, str.tostring(f_tickFormat())), text_color = color.blue)
        table.cell(tradeTable, 2, 2, "", text_color = color.white)
        table.cell(tradeTable, 3, 2, str.tostring(t1, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 4, 2, str.tostring(t2, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 5, 2, str.tostring(t3, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 6, 2, str.tostring(t4, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 7, 2, str.tostring(t5, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 8, 2, str.tostring(k, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 9, 2, str.tostring(lo, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 10, 2, "$" + str.tostring(tradeSize, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 11, 2, str.tostring(exitPercent*100) + "%", text_color = color.gray)
        // table.cell(tradeTable, 2, 3, "+/-", text_color = color.white)
        // table.cell(tradeTable, 3, 3, str.tostring(dt1, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 4, 3, str.tostring(dt2, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 5, 3, str.tostring(dt3, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 6, 3, str.tostring(dt4, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 7, 3, str.tostring(dt5, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 8, 3, str.tostring(dk, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 9, 3, str.tostring(dlo, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 10, 3, str.tostring(remainingUnitsAllocation, str.tostring(f_tickFormat())), text_color = color.gray)
else
    var table tradeTable = table.new(position.top_right, 4, 12, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
    if (barstate.islast and showTradePlan)
        table.cell(tradeTable, 0, 1, "Entry", text_color = color.white)
        table.cell(tradeTable, 0, 2, "SL", text_color = color.white)
        table.cell(tradeTable, 0, 3, "Exit 1", text_color = color.white)
        table.cell(tradeTable, 0, 4, "Exit 2", text_color = color.white)
        table.cell(tradeTable, 0, 5, "Exit 3", text_color = color.white)
        table.cell(tradeTable, 0, 6, "Exit 4", text_color = color.white)
        table.cell(tradeTable, 0, 7, "Exit 5", text_color = color.white)
        table.cell(tradeTable, 0, 8, "T. SL", text_color = color.white)
        table.cell(tradeTable, 0, 9, "TP", text_color = color.white)
        table.cell(tradeTable, 0, 10, "Qty/Cap", text_color = color.white)
        table.cell(tradeTable, 0, 11, "ATR", text_color = color.white)
        table.cell(tradeTable, 1, 0, "S/B", text_color = color.white)
        table.cell(tradeTable, 1, 1, str.tostring(ep, str.tostring(f_tickFormat())), text_color = color.green)
        table.cell(tradeTable, 1, 2, str.tostring(sl, str.tostring(f_tickFormat())), text_color = color.red)
        table.cell(tradeTable, 1, 3, str.tostring(tp1, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 4, str.tostring(tp2, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 5, str.tostring(tp3, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 6, str.tostring(tp4, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 7, str.tostring(tp5, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 8, str.tostring(kp, str.tostring(f_tickFormat())), text_color = color.aqua)
        table.cell(tradeTable, 1, 9, (didSellOnLimitOrder ? str.tostring(sellLimitOrder, str.tostring(f_tickFormat())) : "0.0"), text_color = color.aqua)
        table.cell(tradeTable, 1, 10, str.tostring(qty), text_color = color.gray)
        table.cell(tradeTable, 1, 11, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 0, "P&L", text_color = color.white)
        table.cell(tradeTable, 2, 1, str.tostring(pnl, str.tostring(f_tickFormat())), text_color = color.blue)
        table.cell(tradeTable, 2, 2, "", text_color = color.white)
        table.cell(tradeTable, 2, 3, str.tostring(t1, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 4, str.tostring(t2, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 5, str.tostring(t3, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 6, str.tostring(t4, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 7, str.tostring(t5, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 8, str.tostring(k, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 9, str.tostring(lo, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 10, "$" + str.tostring(tradeSize, str.tostring(f_tickFormat())), text_color = color.gray)
        table.cell(tradeTable, 2, 11, str.tostring(exitPercent*100) + "%", text_color = color.gray)
        // table.cell(tradeTable, 3, 2, "+/-", text_color = color.white)
        // table.cell(tradeTable, 3, 3, str.tostring(dt1, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 4, str.tostring(dt2, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 5, str.tostring(dt3, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 6, str.tostring(dt4, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 7, str.tostring(dt5, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 8, str.tostring(dk, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 9, str.tostring(dlo, str.tostring(f_tickFormat())), text_color = color.gray)
        // table.cell(tradeTable, 3, 10, str.tostring(remainingUnitsAllocation, str.tostring(f_tickFormat())), text_color = color.gray)

// Display debug information
showL1DebugInfo = input.bool(false, title="Debug Info (Level 1)")
var table debugTable = table.new(position.bottom_left, 7, 3, bgcolor = color.silver, frame_width = 2, frame_color = color.gray)
if (barstate.islast and showL1DebugInfo)
    table.cell(debugTable, 1, 0, "Is Active?", text_color = color.black)
    table.cell(debugTable, 2, 0, "Should Scale Out?", text_color = color.black)
    table.cell(debugTable, 3, 0, "Need Exit?", text_color = color.black)
    table.cell(debugTable, 4, 0, "Should Enter?", text_color = color.black)
    table.cell(debugTable, 5, 0, "-", text_color = color.black)
    table.cell(debugTable, 6, 0, "Sentiment", text_color = color.black)
    table.cell(debugTable, 0, 1, "Long", text_color = color.black)
    table.cell(debugTable, 1, 1, str.tostring(inLongTrade), text_color = color.navy)
    //table.cell(debugTable, 2, 1, str.tostring(shouldScaleOut), text_color = color.navy)
    table.cell(debugTable, 3, 1, str.tostring(shouldSellOnKijun), text_color = color.navy)
    table.cell(debugTable, 4, 1, str.tostring(canPrepareForLong), text_color = color.navy)
    table.cell(debugTable, 5, 1, "-", text_color = color.navy)
    table.cell(debugTable, 6, 1, marketView, text_color = color.navy)
    table.cell(debugTable, 0, 2, "Short", text_color = color.black)
    table.cell(debugTable, 1, 2, str.tostring(inShortTrade), text_color = color.maroon)
    //table.cell(debugTable, 2, 2, str.tostring(shouldScaleOut), text_color = color.maroon)
    table.cell(debugTable, 3, 2, str.tostring(shouldBuyOnKijun), text_color = color.maroon)
    table.cell(debugTable, 4, 2, str.tostring(canPrepareForShort), text_color = color.maroon)
    table.cell(debugTable, 5, 2, "-", text_color = color.maroon)
    table.cell(debugTable, 6, 2, marketView, text_color = color.rgb(255, 153, 153))

// Display confluence information
showConfluenceInfo = input.bool(false, title="Confluence Info")
var table confluenceTable = table.new(position.bottom_right, 3, 18, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
if (barstate.islast and showConfluenceInfo)
    table.cell(confluenceTable, 0, 0, "1. Future kumo is " + leadingKumoView + ".", text_color = (leadingKumoView == "bullish" ? color.green : (leadingKumoView == "bearish" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 1, "2. Price is " + priceWrtKumo + " kumo.", text_color = (priceWrtKumo == "above" ? color.green : (priceWrtKumo == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 2, "3. Price is " + priceWrtTenkan + " tenkan.", text_color = priceWrtTenkan == "above" ? color.green : (priceWrtTenkan == "below" ? color.red : color.white), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 3, "4. Tenkan is " + tenkanWrtKijun + " kijun.", text_color = (tenkanWrtKijun == "above" ? color.green : (tenkanWrtKijun == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 4, "5. TK cross was " + recentTkCross + " and " + tkCrossWrtKumo + " kumo.", text_color = (tkCrossWrtKumo == "above" ? (recentTkCross == "bullish" ? color.green : (recentTkCross == "bearish" ? color.rgb(255, 153, 153) : color.white)) : (tkCrossWrtKumo == "below" ? (recentTkCross == "bullish" ? color.rgb(182, 209, 186) : (recentTkCross == "bearish" ? color.red : color.white)) : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 5, "6. Chikou is " + chikouWrtPrice + " price.", text_color = (chikouWrtPrice == "above" ? color.green : (chikouWrtPrice == "below" ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 6, "7. Chikou is " + chikouWrtKumo + " kumo.", text_color = (chikouWrtKumo == "above" ? color.rgb(182, 209, 186) : (chikouWrtKumo == "below" ? color.rgb(255, 153, 153) : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 7, "8. SSB " + (ssbProximityToChikou < 0 ? " may not block Chikou" : " might block Chikou at " + str.tostring(ssbProximityToChikou) + "%") + " for " + (chikouWrtKumo == "above" ? "long" : "short"  )+ " trade.", text_color = ( ssbProximityToChikou < 0 and marketView == "bullish" ? color.green : ( ssbProximityToChikou < 0 and marketView == "bearish" ? color.red : color.gray)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 8, "9. Chikou " + (isChikouSpanFree ? "clear from congestion." : " heading into " + str.tostring(congestionProximity) + " candles!"), text_color = (isChikouSpanFree ? (marketView == "bullish" ? color.green : (marketView == "bearish" ? color.red : color.gray)) : color.white), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 9, "- Is current kumo thick?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 10, "- Is current kumo in flux?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 11, "- Is Senkou-Span-B flat & long?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 12, "- Is future kumo trending?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 13, "- Is kijun flat & long?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 14, "- Is 26 period high/low too far from the price?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 15, "- Does last 26 candle indicate kijun will trend?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 16, "- Are kumo shadows in the close proximity?", text_color = color.yellow, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 17, "* Enter upon 9-period high/low breakout.", text_color = color.aqua, text_halign = text.align_left)
