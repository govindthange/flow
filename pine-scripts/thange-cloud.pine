// Â© 2021
// @ govindthange

//@version=5
indicator("Thange Cloud Playbook", shorttitle="Thange Signals", overlay=true)

// Collect inputs

atrLength = input.int(30, minval=1, title="ATR Length")
atrStopMultiplier = input.float(1.0, minval=0.1, title="ATR x ?")

tenkanSenPeriod = input.int(9, minval=1, title="Tenkan Sen Length")
kijunSenPeriod = input.int(26, minval=1, title="Kijun Sen Length")
senkouSpanBPeriod = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Displacement")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

tenkanSen = donchian(tenkanSenPeriod)
kijunSen = donchian(kijunSenPeriod)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = donchian(senkouSpanBPeriod)

// Calculate stop-loss using ATR
r = ta.atr(atrLength) * atrStopMultiplier
entryPrice = close
longEntryStop = kijunSen - r
shortEntryStop = kijunSen + r

f_print(_text) =>
    // Create label on the first bar.
    var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.white, size.small, text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(_label, bar_index, ta.highest(10)[1])
    label.set_text(_label, _text)

// Assess for high probability setup on the trading timeframe

// 1. Where is price w.r.t Kumo? [above | below | within]

// 2. Where is Price w.r.t nearby flat Kumo-Shadow? [far | near]

// 3. Where is price w.r.t Tenkan? [above | below]
isPriceAboveTenkanSen = close > tenkanSen
isPriceBelowTenkanSen = close < tenkanSen

// 4. Where is Tenkan w.r.t Kijun? [above | below]
isTenkanSenAboveKijunSen = tenkanSen > kijunSen
isTenkanSenBelowKijunSen = tenkanSen < kijunSen

// 5. Where is TK Cross w.r.t Kumo? [above | below | within] <--- This is not a filter. Ignore!

// 6. How is future Kumo? [bullish | bearish | unknown (twist)]
isFutureKumoGreen = senkouSpanA > senkouSpanB
isFutureKumoRed = senkouSpanB > senkouSpanA

// 7. Where is Chikou w.r.t Price? [above | below | within]
float chikouDiff = ta.change(close,displacement+1)
float chikouSource = close
chikouPrice = timeframe.period[displacement+1]
isChikouSpanAbovePrice = chikouDiff > 0
isChikouSpanBelowPrice = chikouDiff < 0

// 8. Where is Chikou w.r.t Kumo? [above | below | within]

// 9. Where is Chikou w.r.t a flat Senkou-Span-B? [above | below]

// 10. Is Chikou free from congestion ahead? [yes | no]

hasBullishConfluence = isPriceAboveTenkanSen and isTenkanSenAboveKijunSen and isFutureKumoGreen //and isChikouSpanAbovePrice
hasBearishConfluence = isPriceBelowTenkanSen and isTenkanSenBelowKijunSen and isFutureKumoRed //and isChikouSpanBelowPrice

shouldScaleOut = false

// Create string format template to restrict SL precision to ticks.
f_tickFormat() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")

// Manage long position

var inLongTrade = false
var shouldEnterLong = false
var shouldExitLong = false

if not inLongTrade
    shouldExitLong := false
    shouldScaleOut := true

if (inLongTrade and isPriceBelowTenkanSen and isTenkanSenBelowKijunSen)
    shouldExitLong := true
    inLongTrade := false
    shouldScaleOut := true

if (inLongTrade and hasBearishConfluence)
    inLongTrade := false
    
f_print("[L1] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldExitLong) + ", bullishConf? = " + str.tostring(hasBullishConfluence) + "\n")

shouldEnterLong := not inLongTrade and hasBullishConfluence
if shouldEnterLong
    inLongTrade := true
    shouldExitLong := false  

f_print("[L2] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldExitLong) + ", shouldEnterLong: " + str.tostring(shouldEnterLong) + "\n\n")

// Plot LONG signals based on confluence
plotshape(shouldEnterLong, title= "Long Signal", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="", size=size.small)
if shouldEnterLong
    shouldEnterLong := false // reset flag

plotshape(shouldExitLong and shouldScaleOut, title= "Exit Long Signal", location=location.abovebar, color=color.green, transp=0, style=shape.xcross, text="", size=size.tiny)

// Draw labels to enter or trail a stop-loss order based on confluence

if inLongTrade
    var labelLong = label.new(bar_index, kijunSen,  text = "Trail S.L.", style = label.style_label_lower_left, color = color.green)
    label.set_xy(labelLong, bar_index, kijunSen)
    label.set_tooltip(labelLong, "Stop loss @ "  + str.tostring(kijunSen, str.tostring(f_tickFormat())))

// Manage short position

var inShortTrade = false
var shouldEnterShort = false
var shouldExitShort = false

if not inShortTrade
    shouldExitShort := false
    shouldScaleOut := true

if (inShortTrade and isPriceAboveTenkanSen and isTenkanSenAboveKijunSen)
    shouldExitShort := true
    inShortTrade := false
    shouldScaleOut := true

if (inShortTrade and hasBullishConfluence)
    inShortTrade := false

f_print("[S1] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldExitShort) + ", bearishConf? = " + str.tostring(hasBearishConfluence) + "\n\n\n")

shouldEnterShort :=  not inShortTrade and hasBearishConfluence
if shouldEnterShort
    inShortTrade := true
    shouldExitShort := false

f_print("[S2] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldExitShort) + ", shouldEnterShort: " + str.tostring(shouldEnterShort) + "\n\n\n\n")

// Plot SHORT signals based on confluence
plotshape(shouldEnterShort,  title= "Short Signal", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="", size=size.small)
if shouldEnterShort
    shouldEnterShort := false // reset flag

plotshape(shouldExitShort and shouldScaleOut, title= "Exit Short Signal", location=location.belowbar, color=color.red, transp=0, style=shape.xcross, text="", size=size.tiny)

// Draw labels to enter or trail a stop-loss order based on confluence

if inShortTrade
    var labelShort = label.new(bar_index, kijunSen, text = "Trail S.L.", style = label.style_label_upper_left, color = color.red)
    label.set_xy(labelShort, bar_index, kijunSen)
    label.set_tooltip(labelShort, "Stop loss @ " + str.tostring(kijunSen, str.tostring(f_tickFormat())))

// Draw Table

var table atrDisplay = table.new(position.bottom_left, 7, 3, bgcolor = color.black, frame_width = 2, frame_color = color.black)
if barstate.islast
    table.cell(atrDisplay, 1, 0, "Entry", text_color = color.white)
    table.cell(atrDisplay, 2, 0, "Stop Loss", text_color = color.white)
    table.cell(atrDisplay, 3, 0, "ATR", text_color = color.white)
    table.cell(atrDisplay, 4, 0, "Active?", text_color = color.white)
    table.cell(atrDisplay, 5, 0, "Enter?", text_color = color.white)
    table.cell(atrDisplay, 6, 0, "Trend", text_color = color.white)
    table.cell(atrDisplay, 0, 1, "Long", text_color = color.white)
    table.cell(atrDisplay, 1, 1, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.green)
    table.cell(atrDisplay, 2, 1, str.tostring(longEntryStop, str.tostring(f_tickFormat())), text_color = color.red)
    table.cell(atrDisplay, 3, 1, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.orange)
    table.cell(atrDisplay, 4, 1, str.tostring(inLongTrade), text_color = color.blue)
    table.cell(atrDisplay, 5, 1, str.tostring(shouldEnterLong), text_color = color.blue)
    table.cell(atrDisplay, 6, 1, str.tostring(hasBullishConfluence? "bullish": "-"), text_color = color.blue)
    table.cell(atrDisplay, 0, 2, "Short", text_color = color.white)
    table.cell(atrDisplay, 1, 2, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.red)
    table.cell(atrDisplay, 2, 2, str.tostring(shortEntryStop, str.tostring(f_tickFormat())), text_color = color.green)
    table.cell(atrDisplay, 3, 2, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.orange)
    table.cell(atrDisplay, 4, 2, str.tostring(inShortTrade), text_color = color.blue)
    table.cell(atrDisplay, 5, 2, str.tostring(shouldEnterShort), text_color = color.blue)
    table.cell(atrDisplay, 6, 2, str.tostring(hasBearishConfluence? "bearish": "-"), text_color = color.blue)
