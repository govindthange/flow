// Â© 2021
// @ govindthange

//@version=5
indicator("Thange Cloud Playbook", shorttitle="Thange Signals", overlay=true)

// Collect inputs

atrLength = input.int(30, minval=1, title="ATR Length")
atrStopMultiplier = input.float(1.0, minval=0.1, title="ATR x ?")

tenkanSenPeriod = input.int(9, minval=1, title="Tenkan Sen Length")
kijunSenPeriod = input.int(26, minval=1, title="Kijun Sen Length")
senkouSpanBPeriod = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Displacement")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

tenkanSen = donchian(tenkanSenPeriod)
kijunSen = donchian(kijunSenPeriod)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = donchian(senkouSpanBPeriod)

// Calculate stop-loss using ATR
r = ta.atr(atrLength) * atrStopMultiplier
entryPrice = close
longEntryStop = kijunSen - r
shortEntryStop = kijunSen + r

f_print(_text) =>
    // Create label on the first bar.
    var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.white, size.small, text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(_label, bar_index, ta.highest(10)[1])
    label.set_text(_label, _text)

// Assess for high probability setup on the trading timeframe

// 1. Where is price w.r.t Kumo? [above | below | within]

isCurrentKumoGreen = senkouSpanA[displacement-1] > senkouSpanB[displacement-1]
isCurrentKumoRed = senkouSpanB[displacement-1] > senkouSpanA[displacement-1]

isPriceAboveKumo = isCurrentKumoGreen ? (close > senkouSpanA[displacement-1]) : (isCurrentKumoRed ? (close > senkouSpanB[displacement-1]) : false)
isPriceBelowKumo = isCurrentKumoGreen ? (close < senkouSpanB[displacement-1]) : (isCurrentKumoRed ? (close < senkouSpanA[displacement-1]) : false)

//f_print("Current Kumo: " + (isCurrentKumoGreen ? "Green": (isCurrentKumoRed ? "Red" : " twist ")) + ", senkouSpanA: " + str.tostring(senkouSpanA[displacement-1]) + ", senkouSpanB: " + str.tostring(senkouSpanB[displacement-1]))
//f_print("Current Kumo: " + (isCurrentKumoGreen ? "Green": (isCurrentKumoRed ? "Red" : " twist ")) + ", Price is " + (isPriceAboveKumo ? "Above" : (isPriceBelowKumo ? "Below" : "Within")))

// 2. Where is price w.r.t nearby flat Kumo-Shadow? [far | near]

// 3. Where is price w.r.t Tenkan? [above | below]
isPriceAboveTenkanSen = close > tenkanSen
isPriceBelowTenkanSen = close < tenkanSen

// 4. Where is Tenkan w.r.t Kijun? [above | below]
isTenkanSenAboveKijunSen = tenkanSen > kijunSen
isTenkanSenBelowKijunSen = tenkanSen < kijunSen

// 5. Where is TK Cross w.r.t Kumo? [above | below | within] <--- This is not a filter. Ignore!
var wasLastTkCrossBullish = false
var wasLastTkCrossBearish = false
var wasLastTkCrossAboveKumo = false
var wasLastTkCrossBelowKumo = false

if (tenkanSen[1] <= kijunSen[1] and tenkanSen > kijunSen)
    wasLastTkCrossBullish := true
    wasLastTkCrossBearish := false

if (tenkanSen[1] >= kijunSen[1] and tenkanSen < kijunSen)
    wasLastTkCrossBullish := false
    wasLastTkCrossBearish := true

if (wasLastTkCrossBullish or wasLastTkCrossBearish)
    wasLastTkCrossAboveKumo := isCurrentKumoGreen ? (kijunSen > senkouSpanA[displacement-1]) : (isCurrentKumoRed ? (kijunSen > senkouSpanB[displacement-1]) : false)
    wasLastTkCrossBelowKumo := isCurrentKumoGreen ? (kijunSen < senkouSpanB[displacement-1]) : (isCurrentKumoRed ? (kijunSen < senkouSpanA[displacement-1]) : false)

// 6. How is future Kumo? [bullish | bearish | unknown (twist)]
isFutureKumoGreen = senkouSpanA > senkouSpanB
isFutureKumoRed = senkouSpanB > senkouSpanA

// 7. Where is Chikou w.r.t Price? [above | below | within]
isChikouSpanAbovePrice = close > high[displacement-1]
isChikouSpanBelowPrice = close < low[displacement-1]

//f_print(str.tostring(displacement-1) + " bar price" + str.tostring(close[displacement-1]))

// 8. Where is Chikou w.r.t Kumo? [above | below | within]

isChikouKumoGreen = senkouSpanA[2*displacement-1] > senkouSpanB[2*displacement-1]
isChikouKumoRed = senkouSpanB[2*displacement-1] > senkouSpanA[2*displacement-1]

isChikouSpanAboveKumo = isChikouKumoGreen ? (close > senkouSpanA[2*displacement-1]) : (isChikouKumoRed ? (close > senkouSpanB[2*displacement-1]) : false)
isChikouSpanBelowKumo = isChikouKumoGreen ? (close < senkouSpanB[2*displacement-1]) : (isChikouKumoRed ? (close < senkouSpanA[2*displacement-1]) : false)
//f_print("Chikou Kumo: " + (isChikouKumoGreen ? "Green": (isChikouKumoRed ? "Red" : " twist ")) + ", Chikou is " + (isChikouSpanAboveKumo ? "Above" : (isChikouSpanBelowKumo ? "Below" : "Within")))

// 9. Where is Chikou w.r.t a flat Senkou-Span-B? [above | below]

// 10. Is Chikou free from congestion ahead? [yes | no]
congestionProximity = input.int(10, minval=1, title="Chikou's required congestion free bar range:")
congestionTolerance = input.float(0, minval=0.0, title="Congestion Tolerance")

highestForChikou = (1-congestionTolerance/100) * ta.highest(high[displacement-congestionProximity], congestionProximity)
lowestForChikou = (1-congestionTolerance/100) * ta.lowest(low[displacement-congestionProximity], congestionProximity)

isChikouSpanFree = isChikouSpanAbovePrice ? (close > highestForChikou) : isChikouSpanBelowPrice ? (close < lowestForChikou) : false
//f_print("isChikouSpanFree: " + str.tostring(isChikouSpanFree) + " in the next " + str.tostring(congestionProximity) + " bars, highest: " + str.tostring(highestForChikou) + ", lowest: " + str.tostring(lowestForChikou) + "\n")

// Check confluence

hasBullishConfluence = isPriceAboveKumo and isPriceAboveTenkanSen and isTenkanSenAboveKijunSen and isFutureKumoGreen and isChikouSpanAbovePrice and isChikouSpanFree
hasBearishConfluence = isPriceBelowKumo and isPriceBelowTenkanSen and isTenkanSenBelowKijunSen and isFutureKumoRed and isChikouSpanBelowPrice and isChikouSpanFree

// Asssess exit scenarios

// 1. Where is price w.r.t Kijun-Sen?

isPriceAboveKijunSen = high > kijunSen
isPriceBelowKijunSen = low < kijunSen

shouldScaleOut = false

// Create string format template to restrict SL precision to ticks.
f_tickFormat() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")

// Manage long position

var inLongTrade = false
var shouldEnterLong = false
var shouldExitLong = false

if not inLongTrade
    shouldExitLong := false
    shouldScaleOut := true

if (inLongTrade and isPriceBelowKijunSen)
    shouldExitLong := true
    inLongTrade := false
    shouldScaleOut := true

if (inLongTrade and hasBearishConfluence)
    inLongTrade := false
    
//f_print("[L1] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldExitLong) + ", bullishConf? = " + str.tostring(hasBullishConfluence) + "\n")

shouldEnterLong := not inLongTrade and hasBullishConfluence
if shouldEnterLong
    inLongTrade := true
    shouldExitLong := false  

//f_print("[L2] inLongTrade: " + str.tostring(inLongTrade) + ", exit? = " + str.tostring(shouldExitLong) + ", shouldEnterLong: " + str.tostring(shouldEnterLong) + "\n\n")

// Plot LONG signals based on confluence
plotshape(shouldEnterLong, title= "Long Signal", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="", size=size.small)
if shouldEnterLong
    shouldEnterLong := false // reset flag

plotshape(shouldExitLong and shouldScaleOut, title= "Exit Long Signal", location=location.abovebar, color=color.orange, transp=0, style=shape.triangledown, text="", size=size.tiny)

// Draw labels to enter or trail a stop-loss order based on confluence

if inLongTrade
    var labelLong = label.new(bar_index, kijunSen,  text = "Trail S.L.", style = label.style_label_lower_left, color = color.green)
    label.set_xy(labelLong, bar_index, kijunSen)
    label.set_tooltip(labelLong, "Stop loss @ "  + str.tostring(kijunSen, str.tostring(f_tickFormat())))

// Manage short position

var inShortTrade = false
var shouldEnterShort = false
var shouldExitShort = false

if not inShortTrade
    shouldExitShort := false
    shouldScaleOut := true

if (inShortTrade and isPriceAboveKijunSen)
    shouldExitShort := true
    inShortTrade := false
    shouldScaleOut := true

if (inShortTrade and hasBullishConfluence)
    inShortTrade := false

//f_print("[S1] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldExitShort) + ", bearishConf? = " + str.tostring(hasBearishConfluence) + "\n\n\n")

shouldEnterShort :=  not inShortTrade and hasBearishConfluence
if shouldEnterShort
    inShortTrade := true
    shouldExitShort := false

//f_print("[S2] inShortTrade: " + str.tostring(inShortTrade) + ", exit? = " + str.tostring(shouldExitShort) + ", shouldEnterShort: " + str.tostring(shouldEnterShort) + "\n\n\n\n")

// Plot SHORT signals based on confluence
plotshape(shouldEnterShort,  title= "Short Signal", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="", size=size.small)
if shouldEnterShort
    shouldEnterShort := false // reset flag

plotshape(shouldExitShort and shouldScaleOut, title= "Exit Short Signal", location=location.belowbar, color=color.aqua, transp=0, style=shape.triangleup, text="", size=size.tiny)

// Draw labels to enter or trail a stop-loss order based on confluence

if inShortTrade
    var labelShort = label.new(bar_index, kijunSen, text = "Trail S.L.", style = label.style_label_upper_left, color = color.red)
    label.set_xy(labelShort, bar_index, kijunSen)
    label.set_tooltip(labelShort, "Stop loss @ " + str.tostring(kijunSen, str.tostring(f_tickFormat())))

// Display trade information
var table tradeTable = table.new(position.top_right, 7, 3, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
if barstate.islast
    table.cell(tradeTable, 1, 0, "Entry", text_color = color.white)
    table.cell(tradeTable, 2, 0, "Stop Loss", text_color = color.white)
    table.cell(tradeTable, 3, 0, "ATR", text_color = color.white)
    table.cell(tradeTable, 4, 0, "Exit 1", text_color = color.white)
    table.cell(tradeTable, 5, 0, "Exit 2", text_color = color.white)
    table.cell(tradeTable, 6, 0, "Exit 3", text_color = color.white)
    table.cell(tradeTable, 0, 1, "Long", text_color = color.white)
    table.cell(tradeTable, 1, 1, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.green)
    table.cell(tradeTable, 2, 1, str.tostring(longEntryStop, str.tostring(f_tickFormat())), text_color = color.red)
    table.cell(tradeTable, 3, 1, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.orange)
    table.cell(tradeTable, 4, 1, "-", text_color = color.blue)
    table.cell(tradeTable, 5, 1, "-", text_color = color.blue)
    table.cell(tradeTable, 6, 1, "-", text_color = color.blue)
    table.cell(tradeTable, 0, 2, "Short", text_color = color.white)
    table.cell(tradeTable, 1, 2, str.tostring(entryPrice, str.tostring(f_tickFormat())), text_color = color.red)
    table.cell(tradeTable, 2, 2, str.tostring(shortEntryStop, str.tostring(f_tickFormat())), text_color = color.green)
    table.cell(tradeTable, 3, 2, str.tostring(r, str.tostring(f_tickFormat())), text_color = color.orange)
    table.cell(tradeTable, 4, 2, "-", text_color = color.blue)
    table.cell(tradeTable, 5, 2, "-", text_color = color.blue)
    table.cell(tradeTable, 6, 2, "-", text_color = color.blue)
    
// Display debug information
showL1DebugInfo = input.bool(false, title="Debug Info (Level 1)")
var table debugTable = table.new(position.bottom_left, 7, 3, bgcolor = color.silver, frame_width = 2, frame_color = color.gray)
if (barstate.islast and showL1DebugInfo)
    table.cell(debugTable, 1, 0, "Is Active?", text_color = color.black)
    table.cell(debugTable, 2, 0, "Should Scale Out?", text_color = color.black)
    table.cell(debugTable, 3, 0, "Need Exit?", text_color = color.black)
    table.cell(debugTable, 4, 0, "Should Enter?", text_color = color.black)
    table.cell(debugTable, 5, 0, "-", text_color = color.black)
    table.cell(debugTable, 6, 0, "Sentiment", text_color = color.black)
    table.cell(debugTable, 0, 1, "Long", text_color = color.black)
    table.cell(debugTable, 1, 1, str.tostring(inLongTrade), text_color = color.navy)
    table.cell(debugTable, 2, 1, str.tostring(shouldScaleOut), text_color = color.navy)
    table.cell(debugTable, 3, 1, str.tostring(shouldExitLong), text_color = color.navy)
    table.cell(debugTable, 4, 1, str.tostring(shouldEnterLong), text_color = color.navy)
    table.cell(debugTable, 5, 1, "-", text_color = color.navy)
    table.cell(debugTable, 6, 1, str.tostring(hasBullishConfluence? "Bullish": "-"), text_color = color.navy)
    table.cell(debugTable, 0, 2, "Short", text_color = color.black)
    table.cell(debugTable, 1, 2, str.tostring(inShortTrade), text_color = color.maroon)
    table.cell(debugTable, 2, 2, str.tostring(shouldScaleOut), text_color = color.maroon)
    table.cell(debugTable, 3, 2, str.tostring(shouldExitShort), text_color = color.maroon)
    table.cell(debugTable, 4, 2, str.tostring(shouldEnterShort), text_color = color.maroon)
    table.cell(debugTable, 5, 2, "-", text_color = color.maroon)
    table.cell(debugTable, 6, 2, str.tostring(hasBearishConfluence? "Bearish": "-"), text_color = color.rgb(255, 153, 153))

// Display confluence information
showConfluenceInfo = input.bool(false, title="Confluence Info")
var table confluenceTable = table.new(position.bottom_right, 3, 10, bgcolor = color.rgb(0, 0, 0, 30), frame_width = 2, frame_color = color.black)
if (barstate.islast and showConfluenceInfo)
    table.cell(confluenceTable, 0, 0, "1. Price " + (isPriceAboveKumo ? "above" : (isPriceBelowKumo ? "below" : "consolidating within")) + " kumo.", text_color = (isPriceAboveKumo ? color.green : (isPriceBelowKumo ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 1, "2. Is price heading into kumo shadows?", text_color = color.orange, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 2, "3. Price " + (isPriceAboveTenkanSen ? "above" : (isPriceBelowTenkanSen ? "below" : "overlapping")) + " tenkan.", text_color = isPriceAboveTenkanSen ? color.green : (isPriceBelowTenkanSen ? color.red : color.white), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 3, "4. Tenkan " + (isTenkanSenAboveKijunSen ? "above" : (isTenkanSenBelowKijunSen ? "below" : "overlapping")) + " kijun.", text_color = (isTenkanSenAboveKijunSen ? color.green : (isTenkanSenBelowKijunSen ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 4, "5. Last " + (wasLastTkCrossBullish? "bullish " : (wasLastTkCrossBearish? "bearish ": "")) + "TK Cross was " + (wasLastTkCrossAboveKumo ? "above" : (wasLastTkCrossBelowKumo ? "below" : "within")) + " kumo.", text_color = (wasLastTkCrossAboveKumo ? (wasLastTkCrossBullish ? color.green : (wasLastTkCrossBearish ? color.rgb(255, 153, 153) : color.white)) : (wasLastTkCrossBelowKumo ? ( wasLastTkCrossBullish ? color.rgb(182, 209, 186) : (wasLastTkCrossBearish ? color.red : color.white)) : color.gray ) ) , text_halign = text.align_left)
    table.cell(confluenceTable, 0, 5, "6. " + (isFutureKumoGreen ? "Bullish" : (isFutureKumoRed ? "Bearish" : "Twisted")) + " future kumo.", text_color = (isFutureKumoGreen ? color.green : (isFutureKumoRed ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 6, "7. Chikou " + (isChikouSpanAbovePrice ? "above" : (isChikouSpanBelowPrice ? "below" : "hitting")) + " price.", text_color = (isChikouSpanAbovePrice ? color.green : (isChikouSpanBelowPrice ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 7, "8. Chikou " + (isChikouSpanAboveKumo ? "above" : (isChikouSpanBelowKumo ? "below" : "within")) + " kumo.", text_color = (isChikouSpanAboveKumo ? color.green : (isChikouSpanBelowKumo ? color.red : color.white)), text_halign = text.align_left)
    table.cell(confluenceTable, 0, 8, "9. Is chikou approaching SSB?", text_color = color.orange, text_halign = text.align_left)
    table.cell(confluenceTable, 0, 9, "10. Chikou " + (isChikouSpanFree ? "clear for" : "congested for ") + str.tostring(congestionProximity) + " candles.", text_color = (isChikouSpanFree ? (hasBullishConfluence ? color.green : (hasBearishConfluence ? color.red : color.blue)) : color.white), text_halign = text.align_left)
